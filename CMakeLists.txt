# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

project(brainfix)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching argparse (v3.1)...")
FetchContent_Declare(argparse
	GIT_REPOSITORY
		"https://github.com/p-ranav/argparse"
	GIT_TAG
		v3.1
)
FetchContent_MakeAvailable(argparse)

# Target: bfx
set(bfx_SOURCES
	"bfx-compiler/autogen/compiler_gen.cpp"
	"bfx-compiler/autogen/lexer_gen.cpp"
	"bfx-compiler/include/bfgenerator.hpp"
	"bfx-compiler/include/bfxfunction.hpp"
	"bfx-compiler/include/compiler.hpp"
	"bfx-compiler/include/instruction.hpp"
	"bfx-compiler/include/lexer.hpp"
	"bfx-compiler/include/memory.hpp"
	"bfx-compiler/include/parser_types.hpp"
	"bfx-compiler/include/scope.hpp"
	"bfx-compiler/include/typesystem.hpp"
	"bfx-compiler/src/bfgenerator.cpp"
	"bfx-compiler/src/compiler.cpp"
	"bfx-compiler/src/main.cpp"
	"bfx-compiler/src/memory.cpp"
	"bfx-compiler/src/scanner.cpp"
	"bfx-compiler/src/scope.cpp"
	"bfx-compiler/src/typesystem.cpp"
	cmake.toml
)

add_executable(bfx)

target_sources(bfx PRIVATE ${bfx_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bfx_SOURCES})

target_compile_features(bfx PRIVATE
	cxx_std_20
)

target_include_directories(bfx PRIVATE
	"bfx-compiler/include"
	"bx-compiler/autogen"
)

target_link_libraries(bfx PRIVATE
	argparse::argparse
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bfx)
endif()

# Target: bfint
set(bfint_SOURCES
	"bfx-interpreter/include/bfint.hpp"
	"bfx-interpreter/src/bfint.cpp"
	"bfx-interpreter/src/main.cpp"
	cmake.toml
)

add_executable(bfint)

target_sources(bfint PRIVATE ${bfint_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${bfint_SOURCES})

target_compile_features(bfint PRIVATE
	cxx_std_20
)

target_include_directories(bfint PRIVATE
	"bfx-interpreter/include"
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT bfint)
endif()
