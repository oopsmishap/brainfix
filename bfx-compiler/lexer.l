%class-name Lexer
%filenames lexer
%lex-source = "lexer_gen.cpp"

ident [_a-zA-Z][_a-zA-Z0-9]*
blanks [[:blank:]\n]

%x string
%x character
%x eolcomment
%x ccomment
%x test
%x test_content
%x escape_test_content

%%

{blanks}                    // ignore

"include"                   return CompilerBase::INCLUDE;
"function"                  return CompilerBase::FUNCTION;
"let"                       return CompilerBase::LET;
"struct"                    return CompilerBase::STRUCT;
"global"                    return CompilerBase::GLOBAL;
"const"                     return CompilerBase::CONST;
"for"                       return CompilerBase::FOR;
"if"                        return CompilerBase::IF;
"else"                      return CompilerBase::ELSE;
"while"                     return CompilerBase::WHILE;
"switch"                    return CompilerBase::SWITCH;
"case"                      return CompilerBase::CASE;
"default"                   return CompilerBase::DEFAULT;
"break"                     return CompilerBase::BREAK;
"continue"                  return CompilerBase::CONTINUE;
"return"                    return CompilerBase::RETURN;
"static_assert"             return CompilerBase::ASSERT;
"++"                        return CompilerBase::INC;
"--"                        return CompilerBase::DEC;
"+="                        return CompilerBase::ADD;
"-="                        return CompilerBase::SUB;
"*="                        return CompilerBase::MUL;
"/="                        return CompilerBase::DIV;
"%="                        return CompilerBase::MOD;
"^="                        return CompilerBase::POW;
"/=%"                       return CompilerBase::DIVMOD;
"%=/"                       return CompilerBase::MODDIV;
"<="                        return CompilerBase::LE;
">="                        return CompilerBase::GE;
"=="                        return CompilerBase::EQ;
"!="                        return CompilerBase::NE;
"&&"                        return CompilerBase::AND;
"||"                        return CompilerBase::OR;
"__scan"                    return CompilerBase::SCAN;
"__print"                   return CompilerBase::PRINT;
"__rand"                    return CompilerBase::RAND;
"sizeof"                    return CompilerBase::SIZEOF;

[[:digit:]]+                return CompilerBase::NUM;
"0x"[[:xdigit:]]+           return CompilerBase::HEX;
{ident}                     return CompilerBase::IDENT;

"'"."'"                     {
                                setMatched(matched().substr(1, 1));
                                return CompilerBase::CHR;
                            }
"'\\"."'"                   {
                                char escaped = escape(matched()[2]);
                                setMatched(std::string(1, escaped));
                                return CompilerBase::CHR;
                            }

\"                          {
                                pushStartCondition(StartCondition_::string);
                            }

"//"                        {
                                pushStartCondition(StartCondition_::eolcomment);
                            }

"/*"                        {
                                ++d_nestedCommentLevel;
                                pushStartCondition(StartCondition_::ccomment);
                            }


"@start_test"               {
                                pushStartCondition(StartCondition_::test);
                                return CompilerBase::START_TEST;
                            }

.|\n|\r                     return matched()[0];

<string>{
\"                          {
                                popStartCondition();
                                setMatched(matched().substr(0, matched().size() - 1));
                                return CompilerBase::STR;
                            }

"\\".                       {
                                char escaped = escape(matched().back());
                                setMatched(matched().substr(0, matched().size() - 2) + escaped);
                                more();
                            }
                            
.                           more();
}

<eolcomment>{
\n|\r                       popStartCondition();
.                           // ignore
}
                
<ccomment>{
"/*"                        {
                                 ++d_nestedCommentLevel;
                            }
"*/"                        {
                                if (--d_nestedCommentLevel == 0)
                                   popStartCondition();
                            }
.|\n|\r                     
}

<test>{

"<"|">"                     return matched()[0];
{ident}                     return CompilerBase::IDENT;

\"                          {
                                more();
                                pushStartCondition(StartCondition_::string);
                            }
^"```input"{blanks}*\n      {
                                pushStartCondition(StartCondition_::test_content);
                                return CompilerBase::INPUT;
                            }      

^"```expect"{blanks}*\n     {
                                 pushStartCondition(StartCondition_::test_content);
                                 return CompilerBase::EXPECT;
                            }      

"@end_test"                 {
                                popStartCondition();
                                return CompilerBase::END_TEST;
                            }

"//"                        {
                                pushStartCondition(StartCondition_::eolcomment);
                            }

"/*"                        {
                                ++d_nestedCommentLevel;
                                pushStartCondition(StartCondition_::ccomment);
                            }

.|\n                        // ignore                           
} // test


<test_content>{

\\\n                       // ignore \ at end of line

"\\".                      {
                                setMatched(std::string(1, escape(matched()[1])));
                                return CompilerBase::CHR;
                           }

"${"                       {
                                pushStartCondition(StartCondition_::escape_test_content);
                           }


^"```"{blanks}*\n          {
                                popStartCondition();
                                return CompilerBase::END_TEST_CONTENT;
                            }

.|\n                        {
                                return CompilerBase::CHR;
                            }

} // test_content

<escape_test_content>{
                            
"}"                         {
                                char c = escapeTestContent(matched().substr(0, matched().size() - 1));
                                setMatched(std::string(1, c));
                                popStartCondition();
                                return CompilerBase::CHR;
                            }

.                           more();

} // escape
