// Generated by Bisonc++ V6.04.04 on Thu, 16 Jan 2025 14:50:22 +0000

// base/comment

// $insert class.ih
#include "compiler.inl"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken()
// will be called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] =
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce,
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

enum Reserved_
{
    UNDETERMINED_ = -2,
    EOF_          = -1,
    errTok_       = 256
};
enum StateType // modify statetype/data.cc when this enum changes
{
    NORMAL,
    ERR_ITEM,
    REQ_TOKEN,
    ERR_REQ,    // ERR_ITEM | REQ_TOKEN
    DEF_RED,    // state having default reduction
    ERR_DEF,    // ERR_ITEM | DEF_RED
    REQ_DEF,    // REQ_TOKEN | DEF_RED
    ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
};
inline bool operator&(StateType lhs, StateType rhs)
{
    return (static_cast<int>(lhs) & rhs) != 0;
}
enum StateTransition
{
    ACCEPT_ = 0, // `ACCEPT' TRANSITION
};

struct PI_ // Production Info
{
    size_t d_nonTerm; // identification number of this production's
                      // non-terminal
    size_t d_size;    // number of elements in this production
};

struct SR_ // Shift Reduce info, see its description above
{
    union
    {
        int _field_1_; // initializer, allowing initializations
                       // of the SR s_[] arrays
        StateType d_type;
        int       d_token;
    };
    union
    {
        int _field_2_;

        int d_lastIdx; // if negative, the state uses SHIFT
        int d_action;  // may be negative (reduce),
                       // postive (shift), or 0 (accept)
    };
};

// $insert staticdata

enum // size to expand the state-stack with when
{    // full
    STACK_EXPANSION_ = 10
};

// Productions Info Records:
PI_ const s_productionInfo[] = {
    {0, 0},   // not used: reduction values are negative
    {349, 0}, // 1: program ->  <empty>
    {349, 2}, // 2: program (errTok_) ->  program errTok_
    {349, 2}, // 3: program ->  program function_definition
    {349, 2}, // 4: program ->  program global_variable_list
    {349, 2}, // 5: program ->  program include_directive
    {349, 2}, // 6: program ->  program const_definition
    {349, 2}, // 7: program ->  program struct_definition
    {349, 2}, // 8: program ->  program unit_test_block
    {352, 2}, // 9: include_directive (INCLUDE) ->  INCLUDE STR
    {350, 2}, // 10: function_definition ->  function_header scope_block
    {356, 5
    }, // 11: function_header (FUNCTION) ->  FUNCTION IDENT '(' optional_parameter_list ')'
    {356, 7}, // 12: function_header (FUNCTION) ->  FUNCTION IDENT '=' IDENT '(' optional_parameter_list ')'
    {353, 5}, // 13: const_definition (CONST) ->  CONST IDENT '=' NUM ';'
    {353, 5}, // 14: const_definition (CONST) ->  CONST IDENT '=' HEX ';'
    {353, 5}, // 15: const_definition (CONST) ->  CONST IDENT '=' CHR ';'
    {354, 5}, // 16: struct_definition (STRUCT) ->  STRUCT IDENT '{' struct_body '}'
    {354, 2}, // 17: struct_definition (';') ->  struct_definition ';'
    {357, 2}, // 18: struct_body (';') ->  variable_specification_list ';'
    {357, 3}, // 19: struct_body (';') ->  struct_body variable_specification_list ';'
    {358, 3}, // 20: scope_block ('{') ->  '{' code_body '}'
    {359, 1}, // 21: parameter (IDENT) ->  IDENT
    {359, 2}, // 22: parameter ('&') ->  '&' IDENT
    {360, 1}, // 23: parameter_list ->  parameter
    {360, 3}, // 24: parameter_list (',') ->  parameter_list ',' parameter
    {361, 1}, // 25: optional_parameter_list ->  parameter_list
    {361, 0}, // 26: optional_parameter_list ->  <empty>
    {351, 3
    }, // 27: global_variable_list (GLOBAL) ->  GLOBAL variable_specification_list ';'
    {362, 0}, // 28: code_body ->  <empty>
    {362, 2}, // 29: code_body ->  code_body statement
    {363, 1}, // 30: statement ->  statement_
    {364, 2}, // 31: statement_ (errTok_) ->  errTok_ ';'
    {364, 1}, // 32: statement_ (';') ->  ';'
    {364, 2}, // 33: statement_ (';') ->  expression ';'
    {364, 2}, // 34: statement_ (';') ->  static_assert ';'
    {364, 1}, // 35: statement_ ->  scope_block
    {364, 1}, // 36: statement_ ->  for_statement
    {364, 1}, // 37: statement_ ->  if_statement
    {364, 1}, // 38: statement_ ->  while_statement
    {364, 1}, // 39: statement_ ->  switch_statement
    {364, 1}, // 40: statement_ ->  break_statement
    {364, 1}, // 41: statement_ ->  continue_statement
    {364, 1}, // 42: statement_ ->  return_statement
    {365, 1}, // 43: expression ->  variable_declaration
    {365, 1}, // 44: expression (_var) ->  variable
    {365, 2}, // 45: expression (unaryMinus) ->  '-' expression
    {365, 1}, // 46: expression (_arr) ->  array_element
    {365, 1}, // 47: expression ->  constant_literal
    {365, 1}, // 48: expression ->  string_literal
    {365, 1}, // 49: expression ->  anonymous_array
    {365, 1}, // 50: expression ->  anonymous_struct
    {365, 1}, // 51: expression ->  function_call
    {365, 1}, // 52: expression ->  builtin_function
    {365, 4}, // 53: expression (SIZEOF) ->  SIZEOF '(' IDENT ')'
    {365, 3}, // 54: expression ('=') ->  variable_declaration '=' expression
    {365, 3}, // 55: expression ('=') ->  variable '=' expression
    {365, 3}, // 56: expression ('=') ->  array_element '=' expression
    {365, 3}, // 57: expression ('(') ->  '(' expression ')'
    {365, 2}, // 58: expression (INC) ->  INC variable
    {365, 2}, // 59: expression (DEC) ->  DEC variable
    {365, 2}, // 60: expression (INC) ->  variable INC
    {365, 2}, // 61: expression (DEC) ->  variable DEC
    {365, 2}, // 62: expression (INC) ->  INC array_element
    {365, 2}, // 63: expression (DEC) ->  DEC array_element
    {365, 2}, // 64: expression (INC) ->  array_element INC
    {365, 2}, // 65: expression (DEC) ->  array_element DEC
    {365, 3}, // 66: expression (ADD) ->  variable ADD expression
    {365, 3}, // 67: expression (ADD) ->  array_element ADD expression
    {365, 3}, // 68: expression ('+') ->  expression '+' expression
    {365, 3}, // 69: expression (SUB) ->  variable SUB expression
    {365, 3}, // 70: expression (SUB) ->  array_element SUB expression
    {365, 3}, // 71: expression ('-') ->  expression '-' expression
    {365, 3}, // 72: expression (MUL) ->  variable MUL expression
    {365, 3}, // 73: expression (MUL) ->  array_element MUL expression
    {365, 3}, // 74: expression ('*') ->  expression '*' expression
    {365, 3}, // 75: expression (DIV) ->  variable DIV expression
    {365, 3}, // 76: expression (DIV) ->  array_element DIV expression
    {365, 3}, // 77: expression ('/') ->  expression '/' expression
    {365, 3}, // 78: expression (MOD) ->  variable MOD expression
    {365, 3}, // 79: expression (MOD) ->  array_element MOD expression
    {365, 3}, // 80: expression (DIVMOD) ->  variable DIVMOD expression
    {365, 3}, // 81: expression (DIVMOD) ->  array_element DIVMOD expression
    {365, 3}, // 82: expression (MODDIV) ->  variable MODDIV expression
    {365, 3}, // 83: expression (MODDIV) ->  array_element MODDIV expression
    {365, 3}, // 84: expression ('^') ->  expression '^' expression
    {365, 3}, // 85: expression (POW) ->  variable POW expression
    {365, 3}, // 86: expression (POW) ->  array_element POW expression
    {365, 3}, // 87: expression ('%') ->  expression '%' expression
    {365, 3}, // 88: expression ('<') ->  expression '<' expression
    {365, 3}, // 89: expression ('>') ->  expression '>' expression
    {365, 3}, // 90: expression (LE) ->  expression LE expression
    {365, 3}, // 91: expression (GE) ->  expression GE expression
    {365, 3}, // 92: expression (NE) ->  expression NE expression
    {365, 3}, // 93: expression (EQ) ->  expression EQ expression
    {365, 2}, // 94: expression ('!') ->  '!' expression
    {365, 3}, // 95: expression (AND) ->  expression AND expression
    {365, 3}, // 96: expression (OR) ->  expression OR expression
    {366, 4}, // 97: builtin_function (PRINT) ->  PRINT '(' expression ')'
    {366, 3}, // 98: builtin_function (SCAN) ->  SCAN '(' ')'
    {366, 3}, // 99: builtin_function (RAND) ->  RAND '(' ')'
    {367, 6}, // 100: static_assert (ASSERT) ->  ASSERT '(' expression ',' STR ')'
    {368, 1}, // 101: variable (IDENT) ->  IDENT
    {368, 1}, // 102: variable ->  field
    {369, 3}, // 103: field (IDENT) ->  IDENT '.' IDENT
    {369, 3}, // 104: field ('.') ->  field '.' IDENT
    {370, 1}, // 105: constant_literal (NUM) ->  NUM
    {370, 1}, // 106: constant_literal (HEX) ->  HEX
    {370, 1}, // 107: constant_literal (CHR) ->  CHR
    {371, 4}, // 108: array_element ('[') ->  expression '[' expression ']'
    {372, 1}, // 109: string_literal (STR) ->  STR
    {373, 4}, // 110: anonymous_array ('#') ->  '#' '{' expression_list '}'
    {373, 4}, // 111: anonymous_array ('#') ->  '#' '[' NUM ']'
    {373, 4}, // 112: anonymous_array ('#') ->  '#' '[' HEX ']'
    {373, 4}, // 113: anonymous_array ('#') ->  '#' '[' IDENT ']'
    {373, 6}, // 114: anonymous_array ('#') ->  '#' '[' NUM ',' expression ']'
    {373, 6}, // 115: anonymous_array ('#') ->  '#' '[' HEX ',' expression ']'
    {373, 6}, // 116: anonymous_array ('#') ->  '#' '[' IDENT ',' expression ']'
    {374, 4
    }, // 117: anonymous_struct (IDENT) ->  IDENT '{' optional_expression_list '}'
    {375, 4}, // 118: function_call (IDENT) ->  IDENT '(' optional_expression_list ')'
    {376, 2}, // 119: break_statement (BREAK) ->  BREAK ';'
    {377, 2}, // 120: continue_statement (CONTINUE) ->  CONTINUE ';'
    {378, 2}, // 121: return_statement (RETURN) ->  RETURN ';'
    {379, 9}, // 122: for_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
    {379, 10
    }, // 123: for_statement (FOR) ->  FOR '*' '(' expression ';' expression ';' expression ')' statement
    {379, 8
    }, // 124: for_statement (FOR) ->  FOR '(' LET parameter ':' expression ')' statement
    {379, 9
    }, // 125: for_statement (FOR) ->  FOR '*' '(' LET parameter ':' expression ')' statement
    {380, 5}, // 126: if_statement (IF) ->  IF '(' expression ')' statement
    {380, 7
    }, // 127: if_statement (then) ->  IF '(' expression ')' statement ELSE statement
    {381, 5}, // 128: while_statement (WHILE) ->  WHILE '(' expression ')' statement
    {381, 6}, // 129: while_statement (WHILE) ->  WHILE '*' '(' expression ')' statement
    {382, 7}, // 130: switch_statement (SWITCH) ->  SWITCH '(' expression ')' '{' case_list '}'
    {382, 8}, // 131: switch_statement (SWITCH) ->  SWITCH '(' expression ')' '{' case_list default_case '}'
    {383, 1}, // 132: case_list ->  switch_case
    {383, 2}, // 133: case_list ->  case_list switch_case
    {384, 4}, // 134: switch_case (CASE) ->  CASE expression ':' statement
    {385, 3}, // 135: default_case (DEFAULT) ->  DEFAULT ':' statement
    {386, 2}, // 136: variable_declaration (LET) ->  LET variable_specification
    {387, 1}, // 137: variable_specification (IDENT) ->  IDENT
    {387, 2}, // 138: variable_specification ('&') ->  '&' IDENT
    {387, 3}, // 139: variable_specification ('[') ->  '[' ']' IDENT
    {387, 4}, // 140: variable_specification ('[') ->  '[' NUM ']' IDENT
    {387, 4}, // 141: variable_specification ('[') ->  '[' HEX ']' IDENT
    {387, 4}, // 142: variable_specification ('[') ->  '[' IDENT ']' IDENT
    {387, 5}, // 143: variable_specification ('[') ->  '[' STRUCT IDENT ']' IDENT
    {388, 1}, // 144: variable_specification_list ->  variable_specification
    {388, 3
    }, // 145: variable_specification_list (',') ->  variable_specification_list ',' variable_specification
    {389, 1}, // 146: expression_list ->  expression
    {389, 3}, // 147: expression_list (',') ->  expression_list ',' expression
    {390, 0}, // 148: optional_expression_list ->  <empty>
    {390, 1}, // 149: optional_expression_list ->  expression_list
    {355, 4}, // 150: unit_test_block (START_TEST) ->  START_TEST unit_test_label unit_test_body END_TEST
    {391, 3}, // 151: unit_test_label ('<') ->  '<' IDENT '>'
    {392, 1}, // 152: unit_test_body ->  unit_test_case
    {392, 2}, // 153: unit_test_body ->  unit_test_body unit_test_case
    {393, 3}, // 154: unit_test_case ->  unit_test_label unit_test_input unit_test_expect
    {393, 2}, // 155: unit_test_case ->  unit_test_label unit_test_expect
    {394, 3}, // 156: unit_test_input (INPUT) ->  INPUT unit_test_content END_TEST_CONTENT
    {395, 3}, // 157: unit_test_expect (EXPECT) ->  EXPECT unit_test_content END_TEST_CONTENT
    {396, 0}, // 158: unit_test_content ->  <empty>
    {396, 2}, // 159: unit_test_content (CHR) ->  unit_test_content CHR
    {397, 1}, // 160: program_$ ->  program
};

// State info and SR_ transitions for each state.

SR_ s_0[] = {
    {{DEF_RED}, {2}},
    {{349}, {1}}, // program
    {{0}, {-1}},
};

SR_ s_1[] = {
    {{ERR_REQ}, {16}},
    {{errTok_}, {2}}, // errTok_
    {{350}, {3}},     // function_definition
    {{351}, {4}},     // global_variable_list
    {{352}, {5}},     // include_directive
    {{353}, {6}},     // const_definition
    {{354}, {7}},     // struct_definition
    {{355}, {8}},     // unit_test_block
    {{356}, {9}},     // function_header
    {{259}, {10}},    // GLOBAL
    {{260}, {11}},    // INCLUDE
    {{268}, {12}},    // CONST
    {{272}, {13}},    // STRUCT
    {{277}, {14}},    // START_TEST
    {{258}, {15}},    // FUNCTION
    {{EOF_}, {ACCEPT_}},
    {{0}, {0}},
};

SR_ s_2[] = {
    {{DEF_RED}, {1}},
    {{0}, {-2}},
};

SR_ s_3[] = {
    {{DEF_RED}, {1}},
    {{0}, {-3}},
};

SR_ s_4[] = {
    {{DEF_RED}, {1}},
    {{0}, {-4}},
};

SR_ s_5[] = {
    {{DEF_RED}, {1}},
    {{0}, {-5}},
};

SR_ s_6[] = {
    {{DEF_RED}, {1}},
    {{0}, {-6}},
};

SR_ s_7[] = {
    {{REQ_DEF}, {2}},
    {{59}, {16}}, // ';'
    {{0}, {-7}},
};

SR_ s_8[] = {
    {{DEF_RED}, {1}},
    {{0}, {-8}},
};

SR_ s_9[] = {
    {{REQ_TOKEN}, {3}},
    {{358}, {17}}, // scope_block
    {{123}, {18}}, // '{'
    {{0}, {0}},
};

SR_ s_10[] = {
    {{REQ_TOKEN}, {6}},
    {{388}, {19}}, // variable_specification_list
    {{387}, {20}}, // variable_specification
    {{303}, {21}}, // IDENT
    {{38}, {22}},  // '&'
    {{91}, {23}},  // '['
    {{0}, {0}},
};

SR_ s_11[] = {
    {{REQ_TOKEN}, {2}},
    {{304}, {24}}, // STR
    {{0}, {0}},
};

SR_ s_12[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {25}}, // IDENT
    {{0}, {0}},
};

SR_ s_13[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {26}}, // IDENT
    {{0}, {0}},
};

SR_ s_14[] = {
    {{REQ_TOKEN}, {3}},
    {{391}, {27}}, // unit_test_label
    {{60}, {28}},  // '<'
    {{0}, {0}},
};

SR_ s_15[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {29}}, // IDENT
    {{0}, {0}},
};

SR_ s_16[] = {
    {{DEF_RED}, {1}},
    {{0}, {-17}},
};

SR_ s_17[] = {
    {{DEF_RED}, {1}},
    {{0}, {-10}},
};

SR_ s_18[] = {
    {{DEF_RED}, {2}},
    {{362}, {30}}, // code_body
    {{0}, {-28}},
};

SR_ s_19[] = {
    {{REQ_TOKEN}, {3}},
    {{59}, {31}}, // ';'
    {{44}, {32}}, // ','
    {{0}, {0}},
};

SR_ s_20[] = {
    {{DEF_RED}, {1}},
    {{0}, {-144}},
};

SR_ s_21[] = {
    {{DEF_RED}, {1}},
    {{0}, {-137}},
};

SR_ s_22[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {33}}, // IDENT
    {{0}, {0}},
};

SR_ s_23[] = {
    {{REQ_TOKEN}, {6}},
    {{93}, {34}},  // ']'
    {{305}, {35}}, // NUM
    {{306}, {36}}, // HEX
    {{303}, {37}}, // IDENT
    {{272}, {38}}, // STRUCT
    {{0}, {0}},
};

SR_ s_24[] = {
    {{DEF_RED}, {1}},
    {{0}, {-9}},
};

SR_ s_25[] = {
    {{REQ_TOKEN}, {2}},
    {{61}, {39}}, // '='
    {{0}, {0}},
};

SR_ s_26[] = {
    {{REQ_TOKEN}, {2}},
    {{123}, {40}}, // '{'
    {{0}, {0}},
};

SR_ s_27[] = {
    {{REQ_TOKEN}, {5}},
    {{392}, {41}}, // unit_test_body
    {{393}, {42}}, // unit_test_case
    {{391}, {43}}, // unit_test_label
    {{60}, {28}},  // '<'
    {{0}, {0}},
};

SR_ s_28[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {44}}, // IDENT
    {{0}, {0}},
};

SR_ s_29[] = {
    {{REQ_TOKEN}, {3}},
    {{40}, {45}}, // '('
    {{61}, {46}}, // '='
    {{0}, {0}},
};

SR_ s_30[] = {
    {{ERR_REQ}, {51}}, {{125}, {47}}, // '}'
    {{363}, {48}},                    // statement
    {{364}, {49}},                    // statement_
    {{errTok_}, {50}},                // errTok_
    {{59}, {51}},                     // ';'
    {{365}, {52}},                    // expression
    {{367}, {53}},                    // static_assert
    {{358}, {54}},                    // scope_block
    {{379}, {55}},                    // for_statement
    {{380}, {56}},                    // if_statement
    {{381}, {57}},                    // while_statement
    {{382}, {58}},                    // switch_statement
    {{376}, {59}},                    // break_statement
    {{377}, {60}},                    // continue_statement
    {{378}, {61}},                    // return_statement
    {{386}, {62}},                    // variable_declaration
    {{368}, {63}},                    // variable
    {{45}, {64}},                     // '-'
    {{371}, {65}},                    // array_element
    {{370}, {66}},                    // constant_literal
    {{372}, {67}},                    // string_literal
    {{373}, {68}},                    // anonymous_array
    {{374}, {69}},                    // anonymous_struct
    {{375}, {70}},                    // function_call
    {{366}, {71}},                    // builtin_function
    {{264}, {72}},                    // SIZEOF
    {{40}, {73}},                     // '('
    {{301}, {74}},                    // INC
    {{302}, {75}},                    // DEC
    {{33}, {76}},                     // '!'
    {{276}, {77}},                    // ASSERT
    {{123}, {18}},                    // '{'
    {{265}, {78}},                    // FOR
    {{266}, {79}},                    // IF
    {{267}, {80}},                    // WHILE
    {{269}, {81}},                    // SWITCH
    {{273}, {82}},                    // BREAK
    {{274}, {83}},                    // CONTINUE
    {{275}, {84}},                    // RETURN
    {{257}, {85}},                    // LET
    {{303}, {86}},                    // IDENT
    {{369}, {87}},                    // field
    {{305}, {88}},                    // NUM
    {{306}, {89}},                    // HEX
    {{307}, {90}},                    // CHR
    {{304}, {91}},                    // STR
    {{35}, {92}},                     // '#'
    {{262}, {93}},                    // PRINT
    {{261}, {94}},                    // SCAN
    {{263}, {95}},                    // RAND
    {{0}, {0}},
};

SR_ s_31[] = {
    {{DEF_RED}, {1}},
    {{0}, {-27}},
};

SR_ s_32[] = {
    {{REQ_TOKEN}, {5}},
    {{387}, {96}}, // variable_specification
    {{303}, {21}}, // IDENT
    {{38}, {22}},  // '&'
    {{91}, {23}},  // '['
    {{0}, {0}},
};

SR_ s_33[] = {
    {{DEF_RED}, {1}},
    {{0}, {-138}},
};

SR_ s_34[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {97}}, // IDENT
    {{0}, {0}},
};

SR_ s_35[] = {
    {{REQ_TOKEN}, {2}},
    {{93}, {98}}, // ']'
    {{0}, {0}},
};

SR_ s_36[] = {
    {{REQ_TOKEN}, {2}},
    {{93}, {99}}, // ']'
    {{0}, {0}},
};

SR_ s_37[] = {
    {{REQ_TOKEN}, {2}},
    {{93}, {100}}, // ']'
    {{0}, {0}},
};

SR_ s_38[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {101}}, // IDENT
    {{0}, {0}},
};

SR_ s_39[] = {
    {{REQ_TOKEN}, {4}},
    {{305}, {102}}, // NUM
    {{306}, {103}}, // HEX
    {{307}, {104}}, // CHR
    {{0}, {0}},
};

SR_ s_40[] = {
    {{REQ_TOKEN}, {7}},
    {{357}, {105}}, // struct_body
    {{388}, {106}}, // variable_specification_list
    {{387}, {20}},  // variable_specification
    {{303}, {21}},  // IDENT
    {{38}, {22}},   // '&'
    {{91}, {23}},   // '['
    {{0}, {0}},
};

SR_ s_41[] = {
    {{REQ_TOKEN}, {5}},
    {{278}, {107}}, // END_TEST
    {{393}, {108}}, // unit_test_case
    {{391}, {43}},  // unit_test_label
    {{60}, {28}},   // '<'
    {{0}, {0}},
};

SR_ s_42[] = {
    {{DEF_RED}, {1}},
    {{0}, {-152}},
};

SR_ s_43[] = {
    {{REQ_TOKEN}, {5}},
    {{394}, {109}}, // unit_test_input
    {{395}, {110}}, // unit_test_expect
    {{279}, {111}}, // INPUT
    {{280}, {112}}, // EXPECT
    {{0}, {0}},
};

SR_ s_44[] = {
    {{REQ_TOKEN}, {2}},
    {{62}, {113}}, // '>'
    {{0}, {0}},
};

SR_ s_45[] = {
    {{REQ_DEF}, {6}},
    {{361}, {114}}, // optional_parameter_list
    {{360}, {115}}, // parameter_list
    {{359}, {116}}, // parameter
    {{303}, {117}}, // IDENT
    {{38}, {118}},  // '&'
    {{0}, {-26}},
};

SR_ s_46[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {119}}, // IDENT
    {{0}, {0}},
};

SR_ s_47[] = {
    {{DEF_RED}, {1}},
    {{0}, {-20}},
};

SR_ s_48[] = {
    {{DEF_RED}, {1}},
    {{0}, {-29}},
};

SR_ s_49[] = {
    {{DEF_RED}, {1}},
    {{0}, {-30}},
};

SR_ s_50[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {120}}, // ';'
    {{0}, {0}},
};

SR_ s_51[] = {
    {{DEF_RED}, {1}},
    {{0}, {-32}},
};

SR_ s_52[] = {
    {{REQ_TOKEN}, {17}},
    {{59}, {121}},  // ';'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_53[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {137}}, // ';'
    {{0}, {0}},
};

SR_ s_54[] = {
    {{DEF_RED}, {1}},
    {{0}, {-35}},
};

SR_ s_55[] = {
    {{DEF_RED}, {1}},
    {{0}, {-36}},
};

SR_ s_56[] = {
    {{DEF_RED}, {1}},
    {{0}, {-37}},
};

SR_ s_57[] = {
    {{DEF_RED}, {1}},
    {{0}, {-38}},
};

SR_ s_58[] = {
    {{DEF_RED}, {1}},
    {{0}, {-39}},
};

SR_ s_59[] = {
    {{DEF_RED}, {1}},
    {{0}, {-40}},
};

SR_ s_60[] = {
    {{DEF_RED}, {1}},
    {{0}, {-41}},
};

SR_ s_61[] = {
    {{DEF_RED}, {1}},
    {{0}, {-42}},
};

SR_ s_62[] = {
    {{REQ_DEF}, {2}},
    {{61}, {138}}, // '='
    {{0}, {-43}},
};

SR_ s_63[] = {
    {{REQ_DEF}, {12}},
    {{61}, {139}},  // '='
    {{301}, {140}}, // INC
    {{302}, {141}}, // DEC
    {{286}, {142}}, // ADD
    {{287}, {143}}, // SUB
    {{288}, {144}}, // MUL
    {{290}, {145}}, // DIV
    {{289}, {146}}, // MOD
    {{291}, {147}}, // DIVMOD
    {{292}, {148}}, // MODDIV
    {{293}, {149}}, // POW
    {{0}, {-44}},
};

SR_ s_64[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {150}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_65[] = {
    {{REQ_DEF}, {12}},
    {{61}, {151}},  // '='
    {{301}, {152}}, // INC
    {{302}, {153}}, // DEC
    {{286}, {154}}, // ADD
    {{287}, {155}}, // SUB
    {{288}, {156}}, // MUL
    {{290}, {157}}, // DIV
    {{289}, {158}}, // MOD
    {{291}, {159}}, // DIVMOD
    {{292}, {160}}, // MODDIV
    {{293}, {161}}, // POW
    {{0}, {-46}},
};

SR_ s_66[] = {
    {{DEF_RED}, {1}},
    {{0}, {-47}},
};

SR_ s_67[] = {
    {{DEF_RED}, {1}},
    {{0}, {-48}},
};

SR_ s_68[] = {
    {{DEF_RED}, {1}},
    {{0}, {-49}},
};

SR_ s_69[] = {
    {{DEF_RED}, {1}},
    {{0}, {-50}},
};

SR_ s_70[] = {
    {{DEF_RED}, {1}},
    {{0}, {-51}},
};

SR_ s_71[] = {
    {{DEF_RED}, {1}},
    {{0}, {-52}},
};

SR_ s_72[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {162}}, // '('
    {{0}, {0}},
};

SR_ s_73[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {163}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_74[] = {
    {{REQ_TOKEN}, {28}}, {{368}, {164}}, // variable
    {{371}, {165}},                      // array_element
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{365}, {166}},                      // expression
    {{386}, {62}},                       // variable_declaration
    {{45}, {64}},                        // '-'
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_75[] = {
    {{REQ_TOKEN}, {28}}, {{368}, {167}}, // variable
    {{371}, {168}},                      // array_element
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{365}, {166}},                      // expression
    {{386}, {62}},                       // variable_declaration
    {{45}, {64}},                        // '-'
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_76[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {169}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_77[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {170}}, // '('
    {{0}, {0}},
};

SR_ s_78[] = {
    {{REQ_TOKEN}, {3}},
    {{40}, {171}}, // '('
    {{42}, {172}}, // '*'
    {{0}, {0}},
};

SR_ s_79[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {173}}, // '('
    {{0}, {0}},
};

SR_ s_80[] = {
    {{REQ_TOKEN}, {3}},
    {{40}, {174}}, // '('
    {{42}, {175}}, // '*'
    {{0}, {0}},
};

SR_ s_81[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {176}}, // '('
    {{0}, {0}},
};

SR_ s_82[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {177}}, // ';'
    {{0}, {0}},
};

SR_ s_83[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {178}}, // ';'
    {{0}, {0}},
};

SR_ s_84[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {179}}, // ';'
    {{0}, {0}},
};

SR_ s_85[] = {
    {{REQ_TOKEN}, {5}},
    {{387}, {180}}, // variable_specification
    {{303}, {21}},  // IDENT
    {{38}, {22}},   // '&'
    {{91}, {23}},   // '['
    {{0}, {0}},
};

SR_ s_86[] = {
    {{REQ_DEF}, {4}},
    {{123}, {181}}, // '{'
    {{40}, {182}},  // '('
    {{46}, {183}},  // '.'
    {{0}, {-101}},
};

SR_ s_87[] = {
    {{REQ_DEF}, {2}},
    {{46}, {184}}, // '.'
    {{0}, {-102}},
};

SR_ s_88[] = {
    {{DEF_RED}, {1}},
    {{0}, {-105}},
};

SR_ s_89[] = {
    {{DEF_RED}, {1}},
    {{0}, {-106}},
};

SR_ s_90[] = {
    {{DEF_RED}, {1}},
    {{0}, {-107}},
};

SR_ s_91[] = {
    {{DEF_RED}, {1}},
    {{0}, {-109}},
};

SR_ s_92[] = {
    {{REQ_TOKEN}, {3}},
    {{123}, {185}}, // '{'
    {{91}, {186}},  // '['
    {{0}, {0}},
};

SR_ s_93[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {187}}, // '('
    {{0}, {0}},
};

SR_ s_94[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {188}}, // '('
    {{0}, {0}},
};

SR_ s_95[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {189}}, // '('
    {{0}, {0}},
};

SR_ s_96[] = {
    {{DEF_RED}, {1}},
    {{0}, {-145}},
};

SR_ s_97[] = {
    {{DEF_RED}, {1}},
    {{0}, {-139}},
};

SR_ s_98[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {190}}, // IDENT
    {{0}, {0}},
};

SR_ s_99[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {191}}, // IDENT
    {{0}, {0}},
};

SR_ s_100[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {192}}, // IDENT
    {{0}, {0}},
};

SR_ s_101[] = {
    {{REQ_TOKEN}, {2}},
    {{93}, {193}}, // ']'
    {{0}, {0}},
};

SR_ s_102[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {194}}, // ';'
    {{0}, {0}},
};

SR_ s_103[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {195}}, // ';'
    {{0}, {0}},
};

SR_ s_104[] = {
    {{REQ_TOKEN}, {2}},
    {{59}, {196}}, // ';'
    {{0}, {0}},
};

SR_ s_105[] = {
    {{REQ_TOKEN}, {7}},
    {{125}, {197}}, // '}'
    {{388}, {198}}, // variable_specification_list
    {{387}, {20}},  // variable_specification
    {{303}, {21}},  // IDENT
    {{38}, {22}},   // '&'
    {{91}, {23}},   // '['
    {{0}, {0}},
};

SR_ s_106[] = {
    {{REQ_TOKEN}, {3}},
    {{59}, {199}}, // ';'
    {{44}, {32}},  // ','
    {{0}, {0}},
};

SR_ s_107[] = {
    {{DEF_RED}, {1}},
    {{0}, {-150}},
};

SR_ s_108[] = {
    {{DEF_RED}, {1}},
    {{0}, {-153}},
};

SR_ s_109[] = {
    {{REQ_TOKEN}, {3}},
    {{395}, {200}}, // unit_test_expect
    {{280}, {112}}, // EXPECT
    {{0}, {0}},
};

SR_ s_110[] = {
    {{DEF_RED}, {1}},
    {{0}, {-155}},
};

SR_ s_111[] = {
    {{DEF_RED}, {2}},
    {{396}, {201}}, // unit_test_content
    {{0}, {-158}},
};

SR_ s_112[] = {
    {{DEF_RED}, {2}},
    {{396}, {202}}, // unit_test_content
    {{0}, {-158}},
};

SR_ s_113[] = {
    {{DEF_RED}, {1}},
    {{0}, {-151}},
};

SR_ s_114[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {203}}, // ')'
    {{0}, {0}},
};

SR_ s_115[] = {
    {{REQ_DEF}, {2}},
    {{44}, {204}}, // ','
    {{0}, {-25}},
};

SR_ s_116[] = {
    {{DEF_RED}, {1}},
    {{0}, {-23}},
};

SR_ s_117[] = {
    {{DEF_RED}, {1}},
    {{0}, {-21}},
};

SR_ s_118[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {205}}, // IDENT
    {{0}, {0}},
};

SR_ s_119[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {206}}, // '('
    {{0}, {0}},
};

SR_ s_120[] = {
    {{DEF_RED}, {1}},
    {{0}, {-31}},
};

SR_ s_121[] = {
    {{DEF_RED}, {1}},
    {{0}, {-33}},
};

SR_ s_122[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {207}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_123[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {208}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_124[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {209}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_125[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {210}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_126[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {211}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_127[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {212}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_128[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {213}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_129[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {214}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_130[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {215}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_131[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {216}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_132[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {217}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_133[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {218}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_134[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {219}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_135[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {220}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_136[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {221}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_137[] = {
    {{DEF_RED}, {1}},
    {{0}, {-34}},
};

SR_ s_138[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {222}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_139[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {223}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_140[] = {
    {{DEF_RED}, {1}},
    {{0}, {-60}},
};

SR_ s_141[] = {
    {{DEF_RED}, {1}},
    {{0}, {-61}},
};

SR_ s_142[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {224}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_143[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {225}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_144[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {226}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_145[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {227}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_146[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {228}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_147[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {229}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_148[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {230}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_149[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {231}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_150[] = {
    {{REQ_DEF}, {2}},
    {{91}, {136}}, // '['
    {{0}, {-45}},
};

SR_ s_151[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {232}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_152[] = {
    {{DEF_RED}, {1}},
    {{0}, {-64}},
};

SR_ s_153[] = {
    {{DEF_RED}, {1}},
    {{0}, {-65}},
};

SR_ s_154[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {233}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_155[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {234}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_156[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {235}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_157[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {236}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_158[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {237}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_159[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {238}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_160[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {239}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_161[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {240}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_162[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {241}}, // IDENT
    {{0}, {0}},
};

SR_ s_163[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {242}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_164[] = {
    {{REQ_DEF}, {12}},
    {{61}, {139}},  // '='
    {{301}, {140}}, // INC
    {{302}, {141}}, // DEC
    {{286}, {142}}, // ADD
    {{287}, {143}}, // SUB
    {{288}, {144}}, // MUL
    {{290}, {145}}, // DIV
    {{289}, {146}}, // MOD
    {{291}, {147}}, // DIVMOD
    {{292}, {148}}, // MODDIV
    {{293}, {149}}, // POW
    {{0}, {-58}},
};

SR_ s_165[] = {
    {{REQ_DEF}, {12}},
    {{61}, {151}},  // '='
    {{301}, {152}}, // INC
    {{302}, {153}}, // DEC
    {{286}, {154}}, // ADD
    {{287}, {155}}, // SUB
    {{288}, {156}}, // MUL
    {{290}, {157}}, // DIV
    {{289}, {158}}, // MOD
    {{291}, {159}}, // DIVMOD
    {{292}, {160}}, // MODDIV
    {{293}, {161}}, // POW
    {{0}, {-62}},
};

SR_ s_166[] = {
    {{REQ_TOKEN}, {16}},
    {{91}, {136}},  // '['
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{0}, {0}},
};

SR_ s_167[] = {
    {{REQ_DEF}, {12}},
    {{61}, {139}},  // '='
    {{301}, {140}}, // INC
    {{302}, {141}}, // DEC
    {{286}, {142}}, // ADD
    {{287}, {143}}, // SUB
    {{288}, {144}}, // MUL
    {{290}, {145}}, // DIV
    {{289}, {146}}, // MOD
    {{291}, {147}}, // DIVMOD
    {{292}, {148}}, // MODDIV
    {{293}, {149}}, // POW
    {{0}, {-59}},
};

SR_ s_168[] = {
    {{REQ_DEF}, {12}},
    {{61}, {151}},  // '='
    {{301}, {152}}, // INC
    {{302}, {153}}, // DEC
    {{286}, {154}}, // ADD
    {{287}, {155}}, // SUB
    {{288}, {156}}, // MUL
    {{290}, {157}}, // DIV
    {{289}, {158}}, // MOD
    {{291}, {159}}, // DIVMOD
    {{292}, {160}}, // MODDIV
    {{293}, {161}}, // POW
    {{0}, {-63}},
};

SR_ s_169[] = {
    {{REQ_DEF}, {2}},
    {{91}, {136}}, // '['
    {{0}, {-94}},
};

SR_ s_170[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {243}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_171[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {244}}, // expression
    {{257}, {245}},                      // LET
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_172[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {246}}, // '('
    {{0}, {0}},
};

SR_ s_173[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {247}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_174[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {248}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_175[] = {
    {{REQ_TOKEN}, {2}},
    {{40}, {249}}, // '('
    {{0}, {0}},
};

SR_ s_176[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {250}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_177[] = {
    {{DEF_RED}, {1}},
    {{0}, {-119}},
};

SR_ s_178[] = {
    {{DEF_RED}, {1}},
    {{0}, {-120}},
};

SR_ s_179[] = {
    {{DEF_RED}, {1}},
    {{0}, {-121}},
};

SR_ s_180[] = {
    {{DEF_RED}, {1}},
    {{0}, {-136}},
};

SR_ s_181[] = {
    {{REQ_DEF}, {30}}, {{390}, {251}}, // optional_expression_list
    {{389}, {252}},                    // expression_list
    {{365}, {253}},                    // expression
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {-148}},
};

SR_ s_182[] = {
    {{REQ_DEF}, {30}}, {{390}, {254}}, // optional_expression_list
    {{389}, {252}},                    // expression_list
    {{365}, {253}},                    // expression
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {-148}},
};

SR_ s_183[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {255}}, // IDENT
    {{0}, {0}},
};

SR_ s_184[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {256}}, // IDENT
    {{0}, {0}},
};

SR_ s_185[] = {
    {{REQ_TOKEN}, {29}}, {{389}, {257}}, // expression_list
    {{365}, {253}},                      // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_186[] = {
    {{REQ_TOKEN}, {4}},
    {{305}, {258}}, // NUM
    {{306}, {259}}, // HEX
    {{303}, {260}}, // IDENT
    {{0}, {0}},
};

SR_ s_187[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {261}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_188[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {262}}, // ')'
    {{0}, {0}},
};

SR_ s_189[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {263}}, // ')'
    {{0}, {0}},
};

SR_ s_190[] = {
    {{DEF_RED}, {1}},
    {{0}, {-140}},
};

SR_ s_191[] = {
    {{DEF_RED}, {1}},
    {{0}, {-141}},
};

SR_ s_192[] = {
    {{DEF_RED}, {1}},
    {{0}, {-142}},
};

SR_ s_193[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {264}}, // IDENT
    {{0}, {0}},
};

SR_ s_194[] = {
    {{DEF_RED}, {1}},
    {{0}, {-13}},
};

SR_ s_195[] = {
    {{DEF_RED}, {1}},
    {{0}, {-14}},
};

SR_ s_196[] = {
    {{DEF_RED}, {1}},
    {{0}, {-15}},
};

SR_ s_197[] = {
    {{DEF_RED}, {1}},
    {{0}, {-16}},
};

SR_ s_198[] = {
    {{REQ_TOKEN}, {3}},
    {{59}, {265}}, // ';'
    {{44}, {32}},  // ','
    {{0}, {0}},
};

SR_ s_199[] = {
    {{DEF_RED}, {1}},
    {{0}, {-18}},
};

SR_ s_200[] = {
    {{DEF_RED}, {1}},
    {{0}, {-154}},
};

SR_ s_201[] = {
    {{REQ_TOKEN}, {3}},
    {{281}, {266}}, // END_TEST_CONTENT
    {{307}, {267}}, // CHR
    {{0}, {0}},
};

SR_ s_202[] = {
    {{REQ_TOKEN}, {3}},
    {{281}, {268}}, // END_TEST_CONTENT
    {{307}, {267}}, // CHR
    {{0}, {0}},
};

SR_ s_203[] = {
    {{DEF_RED}, {1}},
    {{0}, {-11}},
};

SR_ s_204[] = {
    {{REQ_TOKEN}, {4}},
    {{359}, {269}}, // parameter
    {{303}, {117}}, // IDENT
    {{38}, {118}},  // '&'
    {{0}, {0}},
};

SR_ s_205[] = {
    {{DEF_RED}, {1}},
    {{0}, {-22}},
};

SR_ s_206[] = {
    {{REQ_DEF}, {6}},
    {{361}, {270}}, // optional_parameter_list
    {{360}, {115}}, // parameter_list
    {{359}, {116}}, // parameter
    {{303}, {117}}, // IDENT
    {{38}, {118}},  // '&'
    {{0}, {-26}},
};

SR_ s_207[] = {
    {{REQ_DEF}, {6}},
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-68}},
};

SR_ s_208[] = {
    {{REQ_DEF}, {6}},
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-71}},
};

SR_ s_209[] = {
    {{REQ_DEF}, {3}},
    {{94}, {126}}, // '^'
    {{91}, {136}}, // '['
    {{0}, {-74}},
};

SR_ s_210[] = {
    {{REQ_DEF}, {3}},
    {{94}, {126}}, // '^'
    {{91}, {136}}, // '['
    {{0}, {-77}},
};

SR_ s_211[] = {
    {{REQ_DEF}, {2}},
    {{91}, {136}}, // '['
    {{0}, {-84}},
};

SR_ s_212[] = {
    {{REQ_DEF}, {3}},
    {{94}, {126}}, // '^'
    {{91}, {136}}, // '['
    {{0}, {-87}},
};

SR_ s_213[] = {
    {{REQ_DEF}, {8}},
    {{43}, {122}}, // '+'
    {{45}, {123}}, // '-'
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-88}},
};

SR_ s_214[] = {
    {{REQ_DEF}, {8}},
    {{43}, {122}}, // '+'
    {{45}, {123}}, // '-'
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-89}},
};

SR_ s_215[] = {
    {{REQ_DEF}, {8}},
    {{43}, {122}}, // '+'
    {{45}, {123}}, // '-'
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-90}},
};

SR_ s_216[] = {
    {{REQ_DEF}, {8}},
    {{43}, {122}}, // '+'
    {{45}, {123}}, // '-'
    {{42}, {124}}, // '*'
    {{47}, {125}}, // '/'
    {{94}, {126}}, // '^'
    {{37}, {127}}, // '%'
    {{91}, {136}}, // '['
    {{0}, {-91}},
};

SR_ s_217[] = {
    {{REQ_DEF}, {12}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{91}, {136}},  // '['
    {{0}, {-92}},
};

SR_ s_218[] = {
    {{REQ_DEF}, {12}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{91}, {136}},  // '['
    {{0}, {-93}},
};

SR_ s_219[] = {
    {{REQ_DEF}, {14}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{91}, {136}},  // '['
    {{0}, {-95}},
};

SR_ s_220[] = {
    {{REQ_DEF}, {15}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{91}, {136}},  // '['
    {{0}, {-96}},
};

SR_ s_221[] = {
    {{REQ_TOKEN}, {17}},
    {{93}, {271}},  // ']'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_222[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-54}},
};

SR_ s_223[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-55}},
};

SR_ s_224[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-66}},
};

SR_ s_225[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-69}},
};

SR_ s_226[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-72}},
};

SR_ s_227[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-75}},
};

SR_ s_228[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-78}},
};

SR_ s_229[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-80}},
};

SR_ s_230[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-82}},
};

SR_ s_231[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-85}},
};

SR_ s_232[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-56}},
};

SR_ s_233[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-67}},
};

SR_ s_234[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-70}},
};

SR_ s_235[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-73}},
};

SR_ s_236[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-76}},
};

SR_ s_237[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-79}},
};

SR_ s_238[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-81}},
};

SR_ s_239[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-83}},
};

SR_ s_240[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-86}},
};

SR_ s_241[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {272}}, // ')'
    {{0}, {0}},
};

SR_ s_242[] = {
    {{DEF_RED}, {1}},
    {{0}, {-57}},
};

SR_ s_243[] = {
    {{REQ_TOKEN}, {17}},
    {{44}, {273}},  // ','
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_244[] = {
    {{REQ_TOKEN}, {17}},
    {{59}, {274}},  // ';'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_245[] = {
    {{REQ_TOKEN}, {6}},
    {{359}, {275}}, // parameter
    {{387}, {180}}, // variable_specification
    {{303}, {276}}, // IDENT
    {{38}, {277}},  // '&'
    {{91}, {23}},   // '['
    {{0}, {0}},
};

SR_ s_246[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {278}}, // expression
    {{257}, {279}},                      // LET
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_247[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {280}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_248[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {281}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_249[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {282}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_250[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {283}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_251[] = {
    {{REQ_TOKEN}, {2}},
    {{125}, {284}}, // '}'
    {{0}, {0}},
};

SR_ s_252[] = {
    {{REQ_DEF}, {2}},
    {{44}, {285}}, // ','
    {{0}, {-149}},
};

SR_ s_253[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-146}},
};

SR_ s_254[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {286}}, // ')'
    {{0}, {0}},
};

SR_ s_255[] = {
    {{DEF_RED}, {1}},
    {{0}, {-103}},
};

SR_ s_256[] = {
    {{DEF_RED}, {1}},
    {{0}, {-104}},
};

SR_ s_257[] = {
    {{REQ_TOKEN}, {3}},
    {{125}, {287}}, // '}'
    {{44}, {285}},  // ','
    {{0}, {0}},
};

SR_ s_258[] = {
    {{REQ_TOKEN}, {3}},
    {{93}, {288}}, // ']'
    {{44}, {289}}, // ','
    {{0}, {0}},
};

SR_ s_259[] = {
    {{REQ_TOKEN}, {3}},
    {{93}, {290}}, // ']'
    {{44}, {291}}, // ','
    {{0}, {0}},
};

SR_ s_260[] = {
    {{REQ_TOKEN}, {3}},
    {{93}, {292}}, // ']'
    {{44}, {293}}, // ','
    {{0}, {0}},
};

SR_ s_261[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {294}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_262[] = {
    {{DEF_RED}, {1}},
    {{0}, {-98}},
};

SR_ s_263[] = {
    {{DEF_RED}, {1}},
    {{0}, {-99}},
};

SR_ s_264[] = {
    {{DEF_RED}, {1}},
    {{0}, {-143}},
};

SR_ s_265[] = {
    {{DEF_RED}, {1}},
    {{0}, {-19}},
};

SR_ s_266[] = {
    {{DEF_RED}, {1}},
    {{0}, {-156}},
};

SR_ s_267[] = {
    {{DEF_RED}, {1}},
    {{0}, {-159}},
};

SR_ s_268[] = {
    {{DEF_RED}, {1}},
    {{0}, {-157}},
};

SR_ s_269[] = {
    {{DEF_RED}, {1}},
    {{0}, {-24}},
};

SR_ s_270[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {295}}, // ')'
    {{0}, {0}},
};

SR_ s_271[] = {
    {{DEF_RED}, {1}},
    {{0}, {-108}},
};

SR_ s_272[] = {
    {{DEF_RED}, {1}},
    {{0}, {-53}},
};

SR_ s_273[] = {
    {{REQ_TOKEN}, {2}},
    {{304}, {296}}, // STR
    {{0}, {0}},
};

SR_ s_274[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {297}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_275[] = {
    {{REQ_TOKEN}, {2}},
    {{58}, {298}}, // ':'
    {{0}, {0}},
};

SR_ s_276[] = {
    {{REQ_DEF}, {2}},
    {{58}, {-21}}, // ':'
    {{0}, {-137}},
};

SR_ s_277[] = {
    {{REQ_TOKEN}, {2}},
    {{303}, {299}}, // IDENT
    {{0}, {0}},
};

SR_ s_278[] = {
    {{REQ_TOKEN}, {17}},
    {{59}, {300}},  // ';'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_279[] = {
    {{REQ_TOKEN}, {6}},
    {{359}, {301}}, // parameter
    {{387}, {180}}, // variable_specification
    {{303}, {276}}, // IDENT
    {{38}, {277}},  // '&'
    {{91}, {23}},   // '['
    {{0}, {0}},
};

SR_ s_280[] = {
    {{ERR_REQ}, {50}}, {{363}, {302}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_281[] = {
    {{ERR_REQ}, {50}}, {{363}, {303}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_282[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {304}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_283[] = {
    {{REQ_TOKEN}, {2}},
    {{123}, {305}}, // '{'
    {{0}, {0}},
};

SR_ s_284[] = {
    {{DEF_RED}, {1}},
    {{0}, {-117}},
};

SR_ s_285[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {306}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_286[] = {
    {{DEF_RED}, {1}},
    {{0}, {-118}},
};

SR_ s_287[] = {
    {{DEF_RED}, {1}},
    {{0}, {-110}},
};

SR_ s_288[] = {
    {{DEF_RED}, {1}},
    {{0}, {-111}},
};

SR_ s_289[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {307}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_290[] = {
    {{DEF_RED}, {1}},
    {{0}, {-112}},
};

SR_ s_291[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {308}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_292[] = {
    {{DEF_RED}, {1}},
    {{0}, {-113}},
};

SR_ s_293[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {309}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_294[] = {
    {{DEF_RED}, {1}},
    {{0}, {-97}},
};

SR_ s_295[] = {
    {{DEF_RED}, {1}},
    {{0}, {-12}},
};

SR_ s_296[] = {
    {{REQ_TOKEN}, {2}},
    {{41}, {310}}, // ')'
    {{0}, {0}},
};

SR_ s_297[] = {
    {{REQ_TOKEN}, {17}},
    {{59}, {311}},  // ';'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_298[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {312}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_299[] = {
    {{REQ_DEF}, {2}},
    {{58}, {-22}}, // ':'
    {{0}, {-138}},
};

SR_ s_300[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {313}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_301[] = {
    {{REQ_TOKEN}, {2}},
    {{58}, {314}}, // ':'
    {{0}, {0}},
};

SR_ s_302[] = {
    {{REQ_DEF}, {2}},
    {{283}, {315}}, // ELSE
    {{0}, {-126}},
};

SR_ s_303[] = {
    {{DEF_RED}, {1}},
    {{0}, {-128}},
};

SR_ s_304[] = {
    {{ERR_REQ}, {50}}, {{363}, {316}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_305[] = {
    {{REQ_TOKEN}, {4}},
    {{383}, {317}}, // case_list
    {{384}, {318}}, // switch_case
    {{270}, {319}}, // CASE
    {{0}, {0}},
};

SR_ s_306[] = {
    {{REQ_DEF}, {16}},
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {-147}},
};

SR_ s_307[] = {
    {{REQ_TOKEN}, {17}},
    {{93}, {320}},  // ']'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_308[] = {
    {{REQ_TOKEN}, {17}},
    {{93}, {321}},  // ']'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_309[] = {
    {{REQ_TOKEN}, {17}},
    {{93}, {322}},  // ']'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_310[] = {
    {{DEF_RED}, {1}},
    {{0}, {-100}},
};

SR_ s_311[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {323}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_312[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {324}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_313[] = {
    {{REQ_TOKEN}, {17}},
    {{59}, {325}},  // ';'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_314[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {326}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_315[] = {
    {{ERR_REQ}, {50}}, {{363}, {327}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_316[] = {
    {{DEF_RED}, {1}},
    {{0}, {-129}},
};

SR_ s_317[] = {
    {{REQ_TOKEN}, {6}},
    {{125}, {328}}, // '}'
    {{385}, {329}}, // default_case
    {{384}, {330}}, // switch_case
    {{271}, {331}}, // DEFAULT
    {{270}, {319}}, // CASE
    {{0}, {0}},
};

SR_ s_318[] = {
    {{DEF_RED}, {1}},
    {{0}, {-132}},
};

SR_ s_319[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {332}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_320[] = {
    {{DEF_RED}, {1}},
    {{0}, {-114}},
};

SR_ s_321[] = {
    {{DEF_RED}, {1}},
    {{0}, {-115}},
};

SR_ s_322[] = {
    {{DEF_RED}, {1}},
    {{0}, {-116}},
};

SR_ s_323[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {333}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_324[] = {
    {{ERR_REQ}, {50}}, {{363}, {334}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_325[] = {
    {{REQ_TOKEN}, {28}}, {{365}, {335}}, // expression
    {{386}, {62}},                       // variable_declaration
    {{368}, {63}},                       // variable
    {{45}, {64}},                        // '-'
    {{371}, {65}},                       // array_element
    {{370}, {66}},                       // constant_literal
    {{372}, {67}},                       // string_literal
    {{373}, {68}},                       // anonymous_array
    {{374}, {69}},                       // anonymous_struct
    {{375}, {70}},                       // function_call
    {{366}, {71}},                       // builtin_function
    {{264}, {72}},                       // SIZEOF
    {{40}, {73}},                        // '('
    {{301}, {74}},                       // INC
    {{302}, {75}},                       // DEC
    {{33}, {76}},                        // '!'
    {{257}, {85}},                       // LET
    {{303}, {86}},                       // IDENT
    {{369}, {87}},                       // field
    {{305}, {88}},                       // NUM
    {{306}, {89}},                       // HEX
    {{307}, {90}},                       // CHR
    {{304}, {91}},                       // STR
    {{35}, {92}},                        // '#'
    {{262}, {93}},                       // PRINT
    {{261}, {94}},                       // SCAN
    {{263}, {95}},                       // RAND
    {{0}, {0}},
};

SR_ s_326[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {336}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_327[] = {
    {{DEF_RED}, {1}},
    {{0}, {-127}},
};

SR_ s_328[] = {
    {{DEF_RED}, {1}},
    {{0}, {-130}},
};

SR_ s_329[] = {
    {{REQ_TOKEN}, {2}},
    {{125}, {337}}, // '}'
    {{0}, {0}},
};

SR_ s_330[] = {
    {{DEF_RED}, {1}},
    {{0}, {-133}},
};

SR_ s_331[] = {
    {{REQ_TOKEN}, {2}},
    {{58}, {338}}, // ':'
    {{0}, {0}},
};

SR_ s_332[] = {
    {{REQ_TOKEN}, {17}},
    {{58}, {339}},  // ':'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_333[] = {
    {{ERR_REQ}, {50}}, {{363}, {340}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_334[] = {
    {{DEF_RED}, {1}},
    {{0}, {-124}},
};

SR_ s_335[] = {
    {{REQ_TOKEN}, {17}},
    {{41}, {341}},  // ')'
    {{43}, {122}},  // '+'
    {{45}, {123}},  // '-'
    {{42}, {124}},  // '*'
    {{47}, {125}},  // '/'
    {{94}, {126}},  // '^'
    {{37}, {127}},  // '%'
    {{60}, {128}},  // '<'
    {{62}, {129}},  // '>'
    {{298}, {130}}, // LE
    {{299}, {131}}, // GE
    {{297}, {132}}, // NE
    {{296}, {133}}, // EQ
    {{295}, {134}}, // AND
    {{294}, {135}}, // OR
    {{91}, {136}},  // '['
    {{0}, {0}},
};

SR_ s_336[] = {
    {{ERR_REQ}, {50}}, {{363}, {342}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_337[] = {
    {{DEF_RED}, {1}},
    {{0}, {-131}},
};

SR_ s_338[] = {
    {{ERR_REQ}, {50}}, {{363}, {343}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_339[] = {
    {{ERR_REQ}, {50}}, {{363}, {344}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_340[] = {
    {{DEF_RED}, {1}},
    {{0}, {-122}},
};

SR_ s_341[] = {
    {{ERR_REQ}, {50}}, {{363}, {345}}, // statement
    {{364}, {49}},                     // statement_
    {{errTok_}, {50}},                 // errTok_
    {{59}, {51}},                      // ';'
    {{365}, {52}},                     // expression
    {{367}, {53}},                     // static_assert
    {{358}, {54}},                     // scope_block
    {{379}, {55}},                     // for_statement
    {{380}, {56}},                     // if_statement
    {{381}, {57}},                     // while_statement
    {{382}, {58}},                     // switch_statement
    {{376}, {59}},                     // break_statement
    {{377}, {60}},                     // continue_statement
    {{378}, {61}},                     // return_statement
    {{386}, {62}},                     // variable_declaration
    {{368}, {63}},                     // variable
    {{45}, {64}},                      // '-'
    {{371}, {65}},                     // array_element
    {{370}, {66}},                     // constant_literal
    {{372}, {67}},                     // string_literal
    {{373}, {68}},                     // anonymous_array
    {{374}, {69}},                     // anonymous_struct
    {{375}, {70}},                     // function_call
    {{366}, {71}},                     // builtin_function
    {{264}, {72}},                     // SIZEOF
    {{40}, {73}},                      // '('
    {{301}, {74}},                     // INC
    {{302}, {75}},                     // DEC
    {{33}, {76}},                      // '!'
    {{276}, {77}},                     // ASSERT
    {{123}, {18}},                     // '{'
    {{265}, {78}},                     // FOR
    {{266}, {79}},                     // IF
    {{267}, {80}},                     // WHILE
    {{269}, {81}},                     // SWITCH
    {{273}, {82}},                     // BREAK
    {{274}, {83}},                     // CONTINUE
    {{275}, {84}},                     // RETURN
    {{257}, {85}},                     // LET
    {{303}, {86}},                     // IDENT
    {{369}, {87}},                     // field
    {{305}, {88}},                     // NUM
    {{306}, {89}},                     // HEX
    {{307}, {90}},                     // CHR
    {{304}, {91}},                     // STR
    {{35}, {92}},                      // '#'
    {{262}, {93}},                     // PRINT
    {{261}, {94}},                     // SCAN
    {{263}, {95}},                     // RAND
    {{0}, {0}},
};

SR_ s_342[] = {
    {{DEF_RED}, {1}},
    {{0}, {-125}},
};

SR_ s_343[] = {
    {{DEF_RED}, {1}},
    {{0}, {-135}},
};

SR_ s_344[] = {
    {{DEF_RED}, {1}},
    {{0}, {-134}},
};

SR_ s_345[] = {
    {{DEF_RED}, {1}},
    {{0}, {-123}},
};

// State array:
SR_* s_state[] = {
    s_0,   s_1,   s_2,   s_3,   s_4,   s_5,   s_6,   s_7,   s_8,   s_9,   s_10,
    s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,  s_20,  s_21,
    s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,  s_30,  s_31,  s_32,
    s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,  s_40,  s_41,  s_42,  s_43,
    s_44,  s_45,  s_46,  s_47,  s_48,  s_49,  s_50,  s_51,  s_52,  s_53,  s_54,
    s_55,  s_56,  s_57,  s_58,  s_59,  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,
    s_66,  s_67,  s_68,  s_69,  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,
    s_77,  s_78,  s_79,  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,
    s_88,  s_89,  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,
    s_99,  s_100, s_101, s_102, s_103, s_104, s_105, s_106, s_107, s_108, s_109,
    s_110, s_111, s_112, s_113, s_114, s_115, s_116, s_117, s_118, s_119, s_120,
    s_121, s_122, s_123, s_124, s_125, s_126, s_127, s_128, s_129, s_130, s_131,
    s_132, s_133, s_134, s_135, s_136, s_137, s_138, s_139, s_140, s_141, s_142,
    s_143, s_144, s_145, s_146, s_147, s_148, s_149, s_150, s_151, s_152, s_153,
    s_154, s_155, s_156, s_157, s_158, s_159, s_160, s_161, s_162, s_163, s_164,
    s_165, s_166, s_167, s_168, s_169, s_170, s_171, s_172, s_173, s_174, s_175,
    s_176, s_177, s_178, s_179, s_180, s_181, s_182, s_183, s_184, s_185, s_186,
    s_187, s_188, s_189, s_190, s_191, s_192, s_193, s_194, s_195, s_196, s_197,
    s_198, s_199, s_200, s_201, s_202, s_203, s_204, s_205, s_206, s_207, s_208,
    s_209, s_210, s_211, s_212, s_213, s_214, s_215, s_216, s_217, s_218, s_219,
    s_220, s_221, s_222, s_223, s_224, s_225, s_226, s_227, s_228, s_229, s_230,
    s_231, s_232, s_233, s_234, s_235, s_236, s_237, s_238, s_239, s_240, s_241,
    s_242, s_243, s_244, s_245, s_246, s_247, s_248, s_249, s_250, s_251, s_252,
    s_253, s_254, s_255, s_256, s_257, s_258, s_259, s_260, s_261, s_262, s_263,
    s_264, s_265, s_266, s_267, s_268, s_269, s_270, s_271, s_272, s_273, s_274,
    s_275, s_276, s_277, s_278, s_279, s_280, s_281, s_282, s_283, s_284, s_285,
    s_286, s_287, s_288, s_289, s_290, s_291, s_292, s_293, s_294, s_295, s_296,
    s_297, s_298, s_299, s_300, s_301, s_302, s_303, s_304, s_305, s_306, s_307,
    s_308, s_309, s_310, s_311, s_312, s_313, s_314, s_315, s_316, s_317, s_318,
    s_319, s_320, s_321, s_322, s_323, s_324, s_325, s_326, s_327, s_328, s_329,
    s_330, s_331, s_332, s_333, s_334, s_335, s_336, s_337, s_338, s_339, s_340,
    s_341, s_342, s_343, s_344, s_345,
};

} // namespace

// $insert polymorphicCode
namespace Meta_
{

size_t const* t_nErrors;
// $insert idoftag
char const* idOfTag_[] = {
    "INT",
    "DECLARATION_LIST",
    "PARAMETER_LIST",
    "CASE_LIST",
    "BFX_FUNCTION",
    "STRING",
    "DECLARATION",
    "STRING_LIST",
    "INSTRUCTION",
    "PARAMETER",
    "CHAR",
    "INSTRUCTION_LIST",
    "TEST_VECTOR",
    "STRING_TUPLE",
    "INSTRUCTION_PAIR",
    "<undefined>"
};

size_t const* s_nErrors_;

Base::~Base()
{
}

} // namespace Meta_

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.

// base/base1
CompilerBase::CompilerBase()
    : d_token(Reserved_::UNDETERMINED_)
    ,
    // $insert baseclasscode
    d_requiredTokens_(0)
{
    Meta_::t_nErrors = &d_nErrors_;
}

// base/clearin
void CompilerBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token           = Reserved_::UNDETERMINED_;
    d_next            = TokenPair{Reserved_::UNDETERMINED_, STYPE_{}};
    d_recovery        = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_            = STYPE_{};

    push_(0);
}

// base/debugfunctions

void CompilerBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_       = mode;
}

void CompilerBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_       = mode & ON;
}

// base/lex
void CompilerBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int CompilerBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const* sr   = s_state[d_state];
    SR_ const* last = sr + sr->d_lastIdx;

    for (; ++sr != last;) // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last) // reached the last element
    {
        if (sr->d_action < 0) // default reduction
        {
            return sr->d_action;
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;

    return action;
}

// base/pop
void CompilerBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp   = &d_stateStack[d_stackIdx];
}

// base/poptoken
void CompilerBase::popToken_()
{
    d_token = d_next.first;
    d_val_  = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void CompilerBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = StatePair{d_state = state, std::move(d_val_)};

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void CompilerBase::pushToken_(int token)
{
    d_next  = TokenPair{d_token, std::move(d_val_)};
    d_token = token;
}

// base/redotoken
void CompilerBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void CompilerBase::reduce_(int rule)
{
    PI_ const& pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void CompilerBase::shift_(int action)
{
    push_(action);
    popToken_(); // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery        = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void CompilerBase::startRecovery_()
{
    int lastToken = d_token; // give the unexpected token a
                             // chance to be processed
                             // again.

    pushToken_(Reserved_::errTok_); // specify errTok_ as next token
    push_(lookup_());               // push the error state

    d_token = lastToken; // reactivate the unexpected
                         // token (we're now in an
                         // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t CompilerBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Compiler::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated.
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)

    if (d_acceptedTokens_ >= d_requiredTokens_) // only generate an error-
    {                                           // message if enough tokens
        ++d_nErrors_;                           // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not(s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Compiler::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_()); // save an already available token
    switch (production)
    {
        // $insert actioncases

    case 2:
#line 103 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 3:
#line 105 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 4:
#line 107 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 5:
#line 109 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 6:
#line 111 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 7:
#line 113 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 8:
#line 115 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 9:
#line 119 "grammar.y"
    {
        pushStream(vs_(0).get<Tag_::STRING>());
    }
    break;

    case 10:
#line 126 "grammar.y"
    {
        addFunction((vs_(-1).get<Tag_::BFX_FUNCTION>())
                        .setBody(vs_(0).get<Tag_::INSTRUCTION>()));
    }
    break;

    case 11:
#line 133 "grammar.y"
    {
        d_val_ = BFXFunction(
            vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::PARAMETER_LIST>()
        );
    }
    break;

    case 12:
#line 138 "grammar.y"
    {
        d_val_ = BFXFunction(
            vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::PARAMETER_LIST>()
        );
        (d_val_.get<Tag_::BFX_FUNCTION>())
            .setReturnVariable(vs_(-5).get<Tag_::STRING>());
    }
    break;

    case 13:
#line 146 "grammar.y"
    {
        addConstant(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INT>());
    }
    break;

    case 14:
#line 151 "grammar.y"
    {
        addConstant(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INT>());
    }
    break;

    case 15:
#line 156 "grammar.y"
    {
        addConstant(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::CHAR>());
    }
    break;

    case 16:
#line 163 "grammar.y"
    {
        addStruct(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::DECLARATION_LIST>());
    }
    break;

    case 17:
#line 168 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 18:
#line 172 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 19:
#line 174 "grammar.y"
    {
        (vs_(-2).get<Tag_::DECLARATION_LIST>())
            .insert(
                vs_(-2).get<Tag_::DECLARATION_LIST>().begin(),
                vs_(-1).get<Tag_::DECLARATION_LIST>().begin(),
                vs_(-1).get<Tag_::DECLARATION_LIST>().end()
            );
        d_val_ = vs_(-2).get<Tag_::DECLARATION_LIST>();
    }
    break;

    case 20:
#line 183 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::INSTRUCTION>();
    }
    break;

    case 21:
#line 190 "grammar.y"
    {
        d_val_ = BFXFunction::Parameter(
            vs_(0).get<Tag_::STRING>(), BFXFunction::ParameterType::Value
        );
    }
    break;

    case 22:
#line 198 "grammar.y"
    {
        d_val_ = BFXFunction::Parameter(
            vs_(0).get<Tag_::STRING>(), BFXFunction::ParameterType::Reference
        );
    }
    break;

    case 23:
#line 208 "grammar.y"
    {
        auto ret = std::vector<BFXFunction::Parameter>();
        ret.push_back(vs_(0).get<Tag_::PARAMETER>());
        d_val_ = ret;
    }
    break;

    case 24:
#line 215 "grammar.y"
    {
        (vs_(-2).get<Tag_::PARAMETER_LIST>()).push_back(vs_(0).get<Tag_::PARAMETER>());
        d_val_ = vs_(-2).get<Tag_::PARAMETER_LIST>();
    }
    break;

    case 25:
#line 223 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 26:
#line 225 "grammar.y"
    {
        d_val_ = std::vector<BFXFunction::Parameter>();
    }
    break;

    case 27:
#line 232 "grammar.y"
    {
        addGlobals(vs_(-1).get<Tag_::DECLARATION_LIST>());
    }
    break;

    case 28:
#line 238 "grammar.y"
    {
        d_val_ = Instruction(
            []()
            {
                return -1;
            }
        );
    }
    break;

    case 29:
#line 243 "grammar.y"
    {
        d_val_ = instruction<&Compiler::mergeInstructions>(
            vs_(-1).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 30:
#line 250 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::statement>(vs_(0).get<Tag_::INSTRUCTION>());
    }
    break;

    case 31:
#line 257 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 32:
#line 259 "grammar.y"
    {
        d_val_ = []()
        {
            return -1;
        };
    }
    break;

    case 33:
#line 264 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 34:
#line 266 "grammar.y"
    {
        d_val_ = std::move(vs_(-1));
    }
    break;

    case 35:
#line 268 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 36:
#line 270 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 37:
#line 272 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 38:
#line 274 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 39:
#line 276 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 40:
#line 278 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 41:
#line 280 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 42:
#line 282 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 43:
#line 286 "grammar.y"
    {
        d_val_ = instruction<&Compiler::declareVariable>(
            (vs_(0).get<Tag_::DECLARATION>()).first,
            (vs_(0).get<Tag_::DECLARATION>()).second
        );
    }
    break;

    case 44:
#line 291 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 45:
#line 293 "grammar.y"
    {
        compilerError("Negative numbers are not supported.");
        d_val_ = []()
        {
            return -1;
        };
    }
    break;

    case 46:
#line 299 "grammar.y"
    {
        d_val_ = instruction<&Compiler::fetchElement>(
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).second
        );
    }
    break;

    case 47:
#line 307 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 48:
#line 309 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 49:
#line 311 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 50:
#line 313 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 51:
#line 315 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 52:
#line 317 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 53:
#line 319 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::sizeOfOperator>(vs_(-1).get<Tag_::STRING>());
    }
    break;

    case 54:
#line 324 "grammar.y"
    {
        d_val_ = instruction<&Compiler::initializeExpression>(
            (vs_(-2).get<Tag_::DECLARATION>()).first,
            (vs_(-2).get<Tag_::DECLARATION>()).second,
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 55:
#line 333 "grammar.y"
    {
        d_val_ = instruction<&Compiler::assign>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 56:
#line 338 "grammar.y"
    {
        d_val_ = instruction<&Compiler::assignElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 57:
#line 347 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::INSTRUCTION>();
    }
    break;

    case 58:
#line 352 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::preIncrement>(vs_(0).get<Tag_::INSTRUCTION>());
    }
    break;

    case 59:
#line 357 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::preDecrement>(vs_(0).get<Tag_::INSTRUCTION>());
    }
    break;

    case 60:
#line 362 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::postIncrement>(vs_(-1).get<Tag_::INSTRUCTION>());
    }
    break;

    case 61:
#line 367 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::postDecrement>(vs_(-1).get<Tag_::INSTRUCTION>());
    }
    break;

    case 62:
#line 372 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyUnaryFunctionToElement>(
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).second,
            &Compiler::preIncrement
        );
    }
    break;

    case 63:
#line 381 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyUnaryFunctionToElement>(
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(0).get<Tag_::INSTRUCTION_PAIR>()).second,
            &Compiler::preDecrement
        );
    }
    break;

    case 64:
#line 390 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyUnaryFunctionToElement>(
            (vs_(-1).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-1).get<Tag_::INSTRUCTION_PAIR>()).second,
            &Compiler::postIncrement
        );
    }
    break;

    case 65:
#line 399 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyUnaryFunctionToElement>(
            (vs_(-1).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-1).get<Tag_::INSTRUCTION_PAIR>()).second,
            &Compiler::postDecrement
        );
    }
    break;

    case 66:
#line 408 "grammar.y"
    {
        d_val_ = instruction<&Compiler::addTo>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 67:
#line 413 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            &Compiler::addTo
        );
    }
    break;

    case 68:
#line 423 "grammar.y"
    {
        d_val_ = instruction<&Compiler::add>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 69:
#line 428 "grammar.y"
    {
        d_val_ = instruction<&Compiler::subtractFrom>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 70:
#line 433 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            &Compiler::subtractFrom
        );
    }
    break;

    case 71:
#line 443 "grammar.y"
    {
        d_val_ = instruction<&Compiler::subtract>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 72:
#line 448 "grammar.y"
    {
        d_val_ = instruction<&Compiler::multiplyBy>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 73:
#line 453 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::multiplyBy)
        );
    }
    break;

    case 74:
#line 463 "grammar.y"
    {
        d_val_ = instruction<&Compiler::multiply>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 75:
#line 468 "grammar.y"
    {
        d_val_ = instruction<&Compiler::divideBy>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 76:
#line 473 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::divideBy)
        );
    }
    break;

    case 77:
#line 483 "grammar.y"
    {
        d_val_ = instruction<&Compiler::divide>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 78:
#line 488 "grammar.y"
    {
        d_val_ = instruction<&Compiler::moduloBy>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 79:
#line 493 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::moduloBy)
        );
    }
    break;

    case 80:
#line 503 "grammar.y"
    {
        d_val_ = instruction<&Compiler::divMod>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 81:
#line 508 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::divMod)
        );
    }
    break;

    case 82:
#line 518 "grammar.y"
    {
        d_val_ = instruction<&Compiler::modDiv>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 83:
#line 523 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::modDiv)
        );
    }
    break;

    case 84:
#line 533 "grammar.y"
    {
        d_val_ = instruction<&Compiler::power>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 85:
#line 538 "grammar.y"
    {
        d_val_ = instruction<&Compiler::powerBy>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 86:
#line 543 "grammar.y"
    {
        d_val_ = instruction<&Compiler::applyBinaryFunctionToElement>(
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).first,
            (vs_(-2).get<Tag_::INSTRUCTION_PAIR>()).second,
            vs_(0).get<Tag_::INSTRUCTION>(),
            Compiler::BinaryFunction(&Compiler::powerBy)
        );
    }
    break;

    case 87:
#line 553 "grammar.y"
    {
        d_val_ = instruction<&Compiler::modulo>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 88:
#line 558 "grammar.y"
    {
        d_val_ = instruction<&Compiler::less>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 89:
#line 563 "grammar.y"
    {
        d_val_ = instruction<&Compiler::greater>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 90:
#line 568 "grammar.y"
    {
        d_val_ = instruction<&Compiler::lessOrEqual>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 91:
#line 573 "grammar.y"
    {
        d_val_ = instruction<&Compiler::greaterOrEqual>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 92:
#line 578 "grammar.y"
    {
        d_val_ = instruction<&Compiler::notEqual>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 93:
#line 583 "grammar.y"
    {
        d_val_ = instruction<&Compiler::equal>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 94:
#line 588 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::logicalNot>(vs_(0).get<Tag_::INSTRUCTION>());
    }
    break;

    case 95:
#line 593 "grammar.y"
    {
        d_val_ = instruction<&Compiler::logicalAnd>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 96:
#line 598 "grammar.y"
    {
        d_val_ = instruction<&Compiler::logicalOr>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 97:
#line 605 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::printCell>(vs_(-1).get<Tag_::INSTRUCTION>());
    }
    break;

    case 98:
#line 610 "grammar.y"
    {
        d_val_ = instruction<&Compiler::scanCell>();
    }
    break;

    case 99:
#line 615 "grammar.y"
    {
        d_val_ = instruction<&Compiler::randomCell>();
    }
    break;

    case 100:
#line 622 "grammar.y"
    {
        d_val_ = instruction<&Compiler::staticAssert>(
            vs_(-3).get<Tag_::INSTRUCTION>(), vs_(-1).get<Tag_::STRING>()
        );
    }
    break;

    case 101:
#line 629 "grammar.y"
    {
        d_val_ = instruction<&Compiler::fetch>(vs_(0).get<Tag_::STRING>());
    }
    break;

    case 102:
#line 634 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::fetchField>(vs_(0).get<Tag_::STRING_LIST>());
    }
    break;

    case 103:
#line 641 "grammar.y"
    {
        d_val_ = std::vector<std::string>{
            vs_(-2).get<Tag_::STRING>(), vs_(0).get<Tag_::STRING>()
        };
    }
    break;

    case 104:
#line 646 "grammar.y"
    {
        (vs_(-2).get<Tag_::STRING_LIST>()).push_back(vs_(0).get<Tag_::STRING>());
        d_val_ = vs_(-2).get<Tag_::STRING_LIST>();
    }
    break;

    case 105:
#line 654 "grammar.y"
    {
        d_val_ = instruction<&Compiler::constVal>(vs_(0).get<Tag_::INT>());
    }
    break;

    case 106:
#line 659 "grammar.y"
    {
        d_val_ = instruction<&Compiler::constVal>(vs_(0).get<Tag_::INT>());
    }
    break;

    case 107:
#line 664 "grammar.y"
    {
        d_val_ = instruction<&Compiler::constVal>(vs_(0).get<Tag_::CHAR>());
    }
    break;

    case 108:
#line 672 "grammar.y"
    {
        d_val_ = std::pair<Instruction, Instruction>(
            vs_(-3).get<Tag_::INSTRUCTION>(), vs_(-1).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 109:
#line 680 "grammar.y"
    {
        d_val_ =
            instruction<&Compiler::arrayFromString>(vs_(0).get<Tag_::STRING>());
    }
    break;

    case 110:
#line 687 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromList>(
            vs_(-1).get<Tag_::INSTRUCTION_LIST>()
        );
    }
    break;

    case 111:
#line 692 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            vs_(-1).get<Tag_::INT>(), instruction<&Compiler::constVal>(0)
        );
    }
    break;

    case 112:
#line 700 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            vs_(-1).get<Tag_::INT>(), instruction<&Compiler::constVal>(0)
        );
    }
    break;

    case 113:
#line 708 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            compileTimeConstant(vs_(-1).get<Tag_::STRING>()),
            instruction<&Compiler::constVal>(0)
        );
    }
    break;

    case 114:
#line 716 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            vs_(-3).get<Tag_::INT>(), vs_(-1).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 115:
#line 721 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            vs_(-3).get<Tag_::INT>(), vs_(-1).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 116:
#line 726 "grammar.y"
    {
        d_val_ = instruction<&Compiler::arrayFromSize>(
            compileTimeConstant(vs_(-3).get<Tag_::STRING>()),
            vs_(-1).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 117:
#line 736 "grammar.y"
    {
        d_val_ = instruction<&Compiler::anonymousStructObject>(
            vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INSTRUCTION_LIST>()
        );
    }
    break;

    case 118:
#line 743 "grammar.y"
    {
        d_val_ = instruction<&Compiler::call>(
            vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INSTRUCTION_LIST>()
        );
    }
    break;

    case 119:
#line 750 "grammar.y"
    {
        d_val_ = instruction<&Compiler::breakStatement>();
    }
    break;

    case 120:
#line 757 "grammar.y"
    {
        d_val_ = instruction<&Compiler::continueStatement>();
    }
    break;

    case 121:
#line 764 "grammar.y"
    {
        d_val_ = instruction<&Compiler::returnStatement>();
    }
    break;

    case 122:
#line 772 "grammar.y"
    {
        d_val_ = instruction<&Compiler::forStatement>(
            vs_(-6).get<Tag_::INSTRUCTION>(),
            vs_(-4).get<Tag_::INSTRUCTION>(),
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 123:
#line 777 "grammar.y"
    {
        d_val_ = instruction<&Compiler::forStatementRuntime>(
            vs_(-6).get<Tag_::INSTRUCTION>(),
            vs_(-4).get<Tag_::INSTRUCTION>(),
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 124:
#line 782 "grammar.y"
    {
        d_val_ = instruction<&Compiler::forRangeStatement>(
            vs_(-4).get<Tag_::PARAMETER>(),
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 125:
#line 787 "grammar.y"
    {
        d_val_ = instruction<&Compiler::forRangeStatementRuntime>(
            vs_(-4).get<Tag_::PARAMETER>(),
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 126:
#line 794 "grammar.y"
    {
        d_val_ = instruction<&Compiler::ifStatement>(
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>(),
            Instruction(
                []()
                {
                    return -1;
                }
            ),
            true
        );
    }
    break;

    case 127:
#line 799 "grammar.y"
    {
        d_val_ = instruction<&Compiler::ifStatement>(
            vs_(-4).get<Tag_::INSTRUCTION>(),
            vs_(-2).get<Tag_::INSTRUCTION>(),
            vs_(0).get<Tag_::INSTRUCTION>(),
            true
        );
    }
    break;

    case 128:
#line 806 "grammar.y"
    {
        d_val_ = instruction<&Compiler::whileStatement>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 129:
#line 811 "grammar.y"
    {
        d_val_ = instruction<&Compiler::whileStatementRuntime>(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 130:
#line 818 "grammar.y"
    {
        d_val_ = instruction<&Compiler::switchStatement>(
            vs_(-4).get<Tag_::INSTRUCTION>(),
            vs_(-1).get<Tag_::CASE_LIST>(),
            []()
            {
                return -1;
            }
        );
    }
    break;

    case 131:
#line 823 "grammar.y"
    {
        d_val_ = instruction<&Compiler::switchStatement>(
            vs_(-5).get<Tag_::INSTRUCTION>(),
            vs_(-2).get<Tag_::CASE_LIST>(),
            vs_(-1).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 132:
#line 831 "grammar.y"
    {
        d_val_ = std::vector<std::pair<Instruction, Instruction>>();
        (d_val_.get<Tag_::CASE_LIST>()).push_back(vs_(0).get<Tag_::INSTRUCTION_PAIR>());
    }
    break;

    case 133:
#line 837 "grammar.y"
    {
        (vs_(-1).get<Tag_::CASE_LIST>())
            .push_back(vs_(0).get<Tag_::INSTRUCTION_PAIR>());
        d_val_ = vs_(-1).get<Tag_::CASE_LIST>();
    }
    break;

    case 134:
#line 845 "grammar.y"
    {
        d_val_ = std::make_pair(
            vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()
        );
    }
    break;

    case 135:
#line 852 "grammar.y"
    {
        d_val_ = vs_(0).get<Tag_::INSTRUCTION>();
    }
    break;

    case 136:
#line 859 "grammar.y"
    {
        d_val_ = vs_(0).get<Tag_::DECLARATION>();
    }
    break;

    case 137:
#line 866 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(), TypeSystem::Type(1)
        };
    }
    break;

    case 138:
#line 875 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(), TypeSystem::Type{}
        };
    }
    break;

    case 139:
#line 884 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(), TypeSystem::Type(-1)
        };
    }
    break;

    case 140:
#line 893 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(), TypeSystem::Type(vs_(-2).get<Tag_::INT>())
        };
    }
    break;

    case 141:
#line 902 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(), TypeSystem::Type(vs_(-2).get<Tag_::INT>())
        };
    }
    break;

    case 142:
#line 911 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(),
            TypeSystem::Type(compileTimeConstant(vs_(-2).get<Tag_::STRING>()))
        };
    }
    break;

    case 143:
#line 920 "grammar.y"
    {
        d_val_ = std::pair<std::string, TypeSystem::Type>{
            vs_(0).get<Tag_::STRING>(),
            TypeSystem::Type(vs_(-2).get<Tag_::STRING>())
        };
    }
    break;

    case 144:
#line 932 "grammar.y"
    {
        d_val_ = std::vector<std::pair<std::string, TypeSystem::Type>>();
        (d_val_.get<Tag_::DECLARATION_LIST>())
            .push_back(vs_(0).get<Tag_::DECLARATION>());
    }
    break;

    case 145:
#line 938 "grammar.y"
    {
        (vs_(-2).get<Tag_::DECLARATION_LIST>())
            .push_back(vs_(0).get<Tag_::DECLARATION>());
        d_val_ = vs_(-2).get<Tag_::DECLARATION_LIST>();
    }
    break;

    case 146:
#line 947 "grammar.y"
    {
        d_val_ = std::vector<Instruction>{};
        (d_val_.get<Tag_::INSTRUCTION_LIST>())
            .push_back(vs_(0).get<Tag_::INSTRUCTION>());
    }
    break;

    case 147:
#line 953 "grammar.y"
    {
        (vs_(-2).get<Tag_::INSTRUCTION_LIST>())
            .push_back(vs_(0).get<Tag_::INSTRUCTION>());
        d_val_ = vs_(-2).get<Tag_::INSTRUCTION_LIST>();
    }
    break;

    case 148:
#line 961 "grammar.y"
    {
        d_val_ = std::vector<Instruction>{};
    }
    break;

    case 149:
#line 966 "grammar.y"
    {
        d_val_ = std::move(vs_(0));
    }
    break;

    case 150:
#line 971 "grammar.y"
    {
        addTest(vs_(-2).get<Tag_::STRING>(), vs_(-1).get<Tag_::TEST_VECTOR>());
    }
    break;

    case 151:
#line 978 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::STRING>();
    }
    break;

    case 152:
#line 985 "grammar.y"
    {
        d_val_ = std::vector<std::tuple<std::string, std::string, std::string>>{};
        (d_val_.get<Tag_::TEST_VECTOR>()).push_back(vs_(0).get<Tag_::STRING_TUPLE>());
    }
    break;

    case 153:
#line 991 "grammar.y"
    {
        (vs_(-1).get<Tag_::TEST_VECTOR>()).push_back(vs_(0).get<Tag_::STRING_TUPLE>());
        d_val_ = vs_(-1).get<Tag_::TEST_VECTOR>();
    }
    break;

    case 154:
#line 999 "grammar.y"
    {
        d_val_ = std::make_tuple(
            vs_(-2).get<Tag_::STRING>(),
            vs_(-1).get<Tag_::STRING>(),
            vs_(0).get<Tag_::STRING>()
        );
    }
    break;

    case 155:
#line 1004 "grammar.y"
    {
        d_val_ = std::make_tuple(
            vs_(-1).get<Tag_::STRING>(), std::string{}, vs_(0).get<Tag_::STRING>()
        );
    }
    break;

    case 156:
#line 1011 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::STRING>();
    }
    break;

    case 157:
#line 1018 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::STRING>();
    }
    break;

    case 158:
#line 1025 "grammar.y"
    {
        d_val_ = std::string("");
    }
    break;

    case 159:
#line 1030 "grammar.y"
    {
        d_val_ = vs_(-1).get<Tag_::STRING>() + vs_(0).get<Tag_::CHAR>();
    }
    break;
    }
}
catch (std::exception const& exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Compiler::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_(); // obtain next token

    int action = lookup_(); // lookup d_token in d_state

    if (action > 0) // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0) // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
        // next token is the rule's LHS
        reduce_(-action);
        return;
    }

    if (recovery_())
        ABORT();
    else
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_(); // skip the failing token
    }
}

// derived/nexttoken
void Compiler::nextToken_()
{
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_)
    {
        return;
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_(); // consume pending token
    }
    else
    {
        ++d_acceptedTokens_; // accept another token (see
                             // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Compiler::print_()
{
    // $insert print
}

// derived/parse
int Compiler::parse()
try
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_(); // initialize, push(0)

    while (true)
    {
        // $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}

// derived/tail
