// Note: compile and run with --random, will not compile with --no-bcr

include "std.bfx"

global [9] WIN_ARRAY;

function init()
{
    WIN_ARRAY = #{0, 2, 1,
                  1, 0, 2,
                  2, 1, 0};
}

function x = validate(&c)
{
    let x = (c == 'R' || c == 'P' || c == 'S');
}

function i = toIndex(&c)
{
    let i;
    switch (c)
    {
        case 'R': i = 0;
        case 'P': i = 1;
        case 'S': i = 2;
    }
}

function w = winner(&p1, &p2)
{
    let w = WIN_ARRAY[3 * p1 + p2];
}

function printScore(&s)
{
    prints("Score: ");
    printd(s[0]);
    prints(" - ");
    printd(s[1]);
}

function main()
{
    init();
    let input;
    let [2] score = 0;
    
    while (true)
    {
        // Get user input
        prints("Choose: Rock (R), Paper (P) or Scissors (S): ");
        scans(input);
        if (!validate(input))
        {
            println("Invalid response. Enter R, P or S.");
            continue;
        }

        // Generate computer move
        let computer = rand() % 3;
        prints("Computer chose: ");
        switch (computer)
        {
            case 0: println("Rock!");
            case 1: println("Paper!");
            case 2: println("Scissors!");
        }

        // Determine winner
        switch (winner(toIndex(input), computer))
        {
            case 0: prints("It's a tie! ");
            case 1:
            {
                prints("You win! ");
                ++score[0];
            }
            case 2:
            {
                prints("Computer wins! ");
                ++score[1];
            }
        }
        printScore(score);
        endl();

        // Again?
        prints("Play again? (y/n) ");
        scans(input);
        switch (input)
        {
            case 'n': break;
            case 'y': endl();
            default:
            {
                println("Invalid input; quitting.");
                return;
            }
        }
    }

    endl();
    println("Thanks for playing! ");
    printScore(score);
    endl();
}
