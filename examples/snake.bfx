include "std.bfx"

/* Snake

   Simple implementation of the classic Snake game.
   
   - Optionally edit the controls and screen-dimensions below.

   - The speed at which it runs, depends on your system. Edit 
     SLEEP_TIME to modify framerate (higher = slower). If 255
     is not enough, consider compiling and running with 
     --type int16 to unlock larger values. Don't forget to specify
     a maximum value for the RNG, e.g.

     $ bfx --random --type int16 -o snake.bf bfx_examples/snake.bfx
     $ bfint --random --rand-max 255 --type int16 --gaming snake.bf

   - Compile with --random 
   - Run with --random --gaming

   Screenshot:
   +------------------------+
   |                        |
   |                        |
   |                        |
   |          <><><>        |
   |              <>        |
   |              <>        |
   |              **        |
   |        ()              |
   |                        |
   |                        |
   |                        |
   |                        |
   +------------------------+
   Score: 4

*/

// Controls
const UP_KEY = 'w';
const DOWN_KEY = 's';
const LEFT_KEY = 'a';
const RIGHT_KEY = 'd';

// Dimensions
const GRID_WIDTH = 12;
const GRID_HEIGHT = 12;
const ARRAY_SIZE = 144;
const MAX_LENGTH = 15;

// Do not alter
const N = 0;
const E = 1;
const S = 2;
const W = 3;

struct Game
{
    [ARRAY_SIZE] snake;
    snakeLength, dir, fruitIndex;
    score;
};

function i = toIndex(&row, &col)
{
    let i = row * GRID_WIDTH + col;
}

function rc = toRowCol(&index)
{
    let [2] rc;
    rc[0] = index / GRID_WIDTH;
    rc[1] = index % GRID_HEIGHT;
}

function row = rowAbove(row)
{
    if (row == 0)
        row = GRID_HEIGHT - 1;
    else
        --row;
}

function row = rowBelow(row)
{
    if (row == GRID_HEIGHT - 1)
        row = 0;
    else
        ++row;
}

function col = colLeft(col)
{
    if (col == 0)
        col = GRID_WIDTH - 1;
    else
        --col;
}

function col = colRight(col)
{
    if (col == GRID_WIDTH - 1)
        col = 0;
    else
        ++col;
}

function game = initGame()
{
    let [struct Game] game;
    game.snake = 0;
    game.snakeLength = 2;
    game.dir = E;
    
    game.snake[0] = toIndex(GRID_HEIGHT / 2, 1);
    game.snake[1] = toIndex(GRID_HEIGHT / 2, 0);

    spawnFruit(game);
}


function drawEmptyGrid()
{
    clear_screen();
    printc('+');
    for (let col = 0; col != GRID_WIDTH; ++col)
        prints("--");
    printc('+');
    endl();

    
    for (let row = 0; row != GRID_HEIGHT; ++row)
    {
        printc('|');
        for (let col = 0; col != GRID_WIDTH; ++col)
            prints("  ");

        printc('|');
        endl();
    }
    
    printc('+');
    for (let col = 0; col != GRID_WIDTH; ++col)
        prints("--");
    printc('+');
    endl();
}

function drawGame(&game)
{
    // Draw head
    let [2] head = toRowCol(game.snake[0]);
    cursor_to(2 + head[0], 2 + 2 * head[1]);
    prints("**");

    // Draw body
    for (let i = 1; i != game.snakeLength; ++i)
    {
        let [2] body = toRowCol(game.snake[i]);
        cursor_to(2 + body[0], 2 + 2 * body[1]);
        prints("<>");
    }

    // Draw Fruit
    let [2] fruit = toRowCol(game.fruitIndex);
    cursor_to(2 + fruit[0], 2 + 2 * fruit[1]);
    prints("()");

    // Draw score
    cursor_to(GRID_HEIGHT + 3, 1);    
    prints("Score: ");
    printd(game.score);
}

function iterate(&game)
{
    // Update head
    let [] oldSnake = game.snake;
    let row = game.snake[0] / GRID_WIDTH;
    let col = game.snake[0] % GRID_WIDTH;
    
    switch (game.dir)
    {
        case N: game.snake[0] = toIndex(rowAbove(row), col);
        case E: game.snake[0] = toIndex(row, colRight(col));
        case S: game.snake[0] = toIndex(rowBelow(row), col);
        case W: game.snake[0] = toIndex(row, colLeft(col));
    }

    // Check if fruit is eaten
    if (game.fruitIndex == game.snake[0])
        eatFruit(game);

    // Update body
    for (let i = 1; i != game.snakeLength; ++i)
        game.snake[i] = oldSnake[i - 1];
}

function handleInput(&game)
{
    let c = scanc();
    if (!c)
        return;

    switch (c)
    {
        case UP_KEY:
        {
            if (game.dir != S)
                game.dir = N;
        }
        case DOWN_KEY:
        {
            if (game.dir != N)
                game.dir = S;
        }
        case LEFT_KEY:
        {
            if (game.dir != E)
                game.dir = W;
        }
        case RIGHT_KEY:
        {
            if (game.dir != W)
                game.dir = E;
        }
    }
}

function spawnFruit(&game)
{
    let row = rand() % GRID_HEIGHT;
    let col = rand() % GRID_WIDTH;
    game.fruitIndex = toIndex(row, col);
}

function eatFruit(&game)
{
    ++game.score;
    if (game.snakeLength < MAX_LENGTH)
    {
        let tailIndex = game.snake[game.snakeLength - 1];
        game.snake[game.snakeLength++] = tailIndex;
    }

    spawnFruit(game);
}

function dead = died(&game)
{
    let dead = false;
    for (let i = 1; i != game.snakeLength; ++i)
    {
        if (game.snake[0] == game.snake[i])
        {
            dead = true;
            return;
        }
    }
}

function ans = restartPrompt()
{
    prints("Press 'r' to restart or 'q' to quit");

    let ans = 0;
    while (!ans)
    {
        ans = scanc();
        switch (ans)
        {
            case 'r': break;
            case 'q': break;
        }
    }
}

function endScreen(&game)
{
    cursor_to(GRID_HEIGHT + 3, 1);
    clear_line();
    cursor_down();
    println("GAME OVER!");
    prints("Final score: "); printd(game.score); endl();
}

function t = speedPrompt()
{
    cursor_to(GRID_HEIGHT / 2, GRID_WIDTH / 2);
    prints("Enter speed (1-5)");
    let t = 0;
    while (!t)
    {
        t = scanc();
        if (t < '1' || t > '5')
            continue;

        t = 250 - (t - '1') * 40;
    }
}

function sleep(n)
{
    for* (let i = 0; i != n; ++i)
    {}
}

function main()
{
    static_assert(ARRAY_SIZE == GRID_WIDTH * GRID_HEIGHT,
                  "Array-size not equal to width * height.");

    static_assert(MAX_LENGTH <= ARRAY_SIZE,
                  "Maximum snake-length must be less or equal to width * height.");

    while* (true)
    {
        let [struct Game] game = initGame();
        let sleepTime = speedPrompt();
        
        while* (true)
        {
            if (died(game))
                break;

            handleInput(game);
            drawEmptyGrid();
            drawGame(game);
            iterate(game);
            sleep(sleepTime);
        }

        endScreen(game);
        if (restartPrompt() == 'q')
            break;
    }

    clear_screen();
    cursor_to(GRID_HEIGHT / 2, GRID_WIDTH / 2);
    prints("Press any key to exit");
}
